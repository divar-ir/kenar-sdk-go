/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// TemporaryResidenceFieldsHeatingCoolingSystem the model 'TemporaryResidenceFieldsHeatingCoolingSystem'
type TemporaryResidenceFieldsHeatingCoolingSystem string

// List of TemporaryResidenceFieldsHeatingCoolingSystem
const (
	TEMPORARYRESIDENCEFIELDSHEATINGCOOLINGSYSTEM_HEATING_COOLING_SYSTEM_EVAPORATIVE_COOLER TemporaryResidenceFieldsHeatingCoolingSystem = "HEATING_COOLING_SYSTEM_EVAPORATIVE_COOLER"
	TEMPORARYRESIDENCEFIELDSHEATINGCOOLINGSYSTEM_HEATING_COOLING_SYSTEM_RADIATOR TemporaryResidenceFieldsHeatingCoolingSystem = "HEATING_COOLING_SYSTEM_RADIATOR"
	TEMPORARYRESIDENCEFIELDSHEATINGCOOLINGSYSTEM_HEATING_COOLING_SYSTEM_SPLIT TemporaryResidenceFieldsHeatingCoolingSystem = "HEATING_COOLING_SYSTEM_SPLIT"
	TEMPORARYRESIDENCEFIELDSHEATINGCOOLINGSYSTEM_HEATING_COOLING_SYSTEM_PACKAGE TemporaryResidenceFieldsHeatingCoolingSystem = "HEATING_COOLING_SYSTEM_PACKAGE"
	TEMPORARYRESIDENCEFIELDSHEATINGCOOLINGSYSTEM_HEATING_COOLING_SYSTEM_GAS_HEATER TemporaryResidenceFieldsHeatingCoolingSystem = "HEATING_COOLING_SYSTEM_GAS_HEATER"
	TEMPORARYRESIDENCEFIELDSHEATINGCOOLINGSYSTEM_HEATING_COOLING_SYSTEM_FAN_COIL TemporaryResidenceFieldsHeatingCoolingSystem = "HEATING_COOLING_SYSTEM_FAN_COIL"
	TEMPORARYRESIDENCEFIELDSHEATINGCOOLINGSYSTEM_HEATING_COOLING_SYSTEM_CHAUFFAGE TemporaryResidenceFieldsHeatingCoolingSystem = "HEATING_COOLING_SYSTEM_CHAUFFAGE"
	TEMPORARYRESIDENCEFIELDSHEATINGCOOLINGSYSTEM_HEATING_COOLING_SYSTEM_AIR_CONDITIONER TemporaryResidenceFieldsHeatingCoolingSystem = "HEATING_COOLING_SYSTEM_AIR_CONDITIONER"
	TEMPORARYRESIDENCEFIELDSHEATINGCOOLINGSYSTEM_HEATING_COOLING_SYSTEM_UNDERFLOOR_HEATING TemporaryResidenceFieldsHeatingCoolingSystem = "HEATING_COOLING_SYSTEM_UNDERFLOOR_HEATING"
)

// All allowed values of TemporaryResidenceFieldsHeatingCoolingSystem enum
var AllowedTemporaryResidenceFieldsHeatingCoolingSystemEnumValues = []TemporaryResidenceFieldsHeatingCoolingSystem{
	"HEATING_COOLING_SYSTEM_EVAPORATIVE_COOLER",
	"HEATING_COOLING_SYSTEM_RADIATOR",
	"HEATING_COOLING_SYSTEM_SPLIT",
	"HEATING_COOLING_SYSTEM_PACKAGE",
	"HEATING_COOLING_SYSTEM_GAS_HEATER",
	"HEATING_COOLING_SYSTEM_FAN_COIL",
	"HEATING_COOLING_SYSTEM_CHAUFFAGE",
	"HEATING_COOLING_SYSTEM_AIR_CONDITIONER",
	"HEATING_COOLING_SYSTEM_UNDERFLOOR_HEATING",
}

func (v *TemporaryResidenceFieldsHeatingCoolingSystem) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TemporaryResidenceFieldsHeatingCoolingSystem(value)
	for _, existing := range AllowedTemporaryResidenceFieldsHeatingCoolingSystemEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TemporaryResidenceFieldsHeatingCoolingSystem", value)
}

// NewTemporaryResidenceFieldsHeatingCoolingSystemFromValue returns a pointer to a valid TemporaryResidenceFieldsHeatingCoolingSystem
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTemporaryResidenceFieldsHeatingCoolingSystemFromValue(v string) (*TemporaryResidenceFieldsHeatingCoolingSystem, error) {
	ev := TemporaryResidenceFieldsHeatingCoolingSystem(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TemporaryResidenceFieldsHeatingCoolingSystem: valid values are %v", v, AllowedTemporaryResidenceFieldsHeatingCoolingSystemEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TemporaryResidenceFieldsHeatingCoolingSystem) IsValid() bool {
	for _, existing := range AllowedTemporaryResidenceFieldsHeatingCoolingSystemEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TemporaryResidenceFieldsHeatingCoolingSystem value
func (v TemporaryResidenceFieldsHeatingCoolingSystem) Ptr() *TemporaryResidenceFieldsHeatingCoolingSystem {
	return &v
}

type NullableTemporaryResidenceFieldsHeatingCoolingSystem struct {
	value *TemporaryResidenceFieldsHeatingCoolingSystem
	isSet bool
}

func (v NullableTemporaryResidenceFieldsHeatingCoolingSystem) Get() *TemporaryResidenceFieldsHeatingCoolingSystem {
	return v.value
}

func (v *NullableTemporaryResidenceFieldsHeatingCoolingSystem) Set(val *TemporaryResidenceFieldsHeatingCoolingSystem) {
	v.value = val
	v.isSet = true
}

func (v NullableTemporaryResidenceFieldsHeatingCoolingSystem) IsSet() bool {
	return v.isSet
}

func (v *NullableTemporaryResidenceFieldsHeatingCoolingSystem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemporaryResidenceFieldsHeatingCoolingSystem(val *TemporaryResidenceFieldsHeatingCoolingSystem) *NullableTemporaryResidenceFieldsHeatingCoolingSystem {
	return &NullableTemporaryResidenceFieldsHeatingCoolingSystem{value: val, isSet: true}
}

func (v NullableTemporaryResidenceFieldsHeatingCoolingSystem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemporaryResidenceFieldsHeatingCoolingSystem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

