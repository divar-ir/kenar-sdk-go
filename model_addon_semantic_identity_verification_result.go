/*
divar_interface/open_platform/chatapi/chatapi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// AddonSemanticIdentityVerificationResult the model 'AddonSemanticIdentityVerificationResult'
type AddonSemanticIdentityVerificationResult string

// List of AddonSemanticIdentityVerificationResult
const (
	ADDONSEMANTICIDENTITYVERIFICATIONRESULT_FACE_AND_ID_MATCHED AddonSemanticIdentityVerificationResult = "FACE_AND_ID_MATCHED"
)

// All allowed values of AddonSemanticIdentityVerificationResult enum
var AllowedAddonSemanticIdentityVerificationResultEnumValues = []AddonSemanticIdentityVerificationResult{
	"FACE_AND_ID_MATCHED",
}

func (v *AddonSemanticIdentityVerificationResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddonSemanticIdentityVerificationResult(value)
	for _, existing := range AllowedAddonSemanticIdentityVerificationResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddonSemanticIdentityVerificationResult", value)
}

// NewAddonSemanticIdentityVerificationResultFromValue returns a pointer to a valid AddonSemanticIdentityVerificationResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddonSemanticIdentityVerificationResultFromValue(v string) (*AddonSemanticIdentityVerificationResult, error) {
	ev := AddonSemanticIdentityVerificationResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddonSemanticIdentityVerificationResult: valid values are %v", v, AllowedAddonSemanticIdentityVerificationResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddonSemanticIdentityVerificationResult) IsValid() bool {
	for _, existing := range AllowedAddonSemanticIdentityVerificationResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AddonSemanticIdentityVerificationResult value
func (v AddonSemanticIdentityVerificationResult) Ptr() *AddonSemanticIdentityVerificationResult {
	return &v
}

type NullableAddonSemanticIdentityVerificationResult struct {
	value *AddonSemanticIdentityVerificationResult
	isSet bool
}

func (v NullableAddonSemanticIdentityVerificationResult) Get() *AddonSemanticIdentityVerificationResult {
	return v.value
}

func (v *NullableAddonSemanticIdentityVerificationResult) Set(val *AddonSemanticIdentityVerificationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonSemanticIdentityVerificationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonSemanticIdentityVerificationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonSemanticIdentityVerificationResult(val *AddonSemanticIdentityVerificationResult) *NullableAddonSemanticIdentityVerificationResult {
	return &NullableAddonSemanticIdentityVerificationResult{value: val, isSet: true}
}

func (v NullableAddonSemanticIdentityVerificationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonSemanticIdentityVerificationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

