/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// FinderPostExtState the model 'FinderPostExtState'
type FinderPostExtState string

// List of finderPostExtState
const (
	FINDERPOSTEXTSTATE_PUBLISHED FinderPostExtState = "PUBLISHED"
	FINDERPOSTEXTSTATE_REVIEW_REQ FinderPostExtState = "REVIEW_REQ"
	FINDERPOSTEXTSTATE_PAYMENT_REQ FinderPostExtState = "PAYMENT_REQ"
	FINDERPOSTEXTSTATE_RETIRED FinderPostExtState = "RETIRED"
)

// All allowed values of FinderPostExtState enum
var AllowedFinderPostExtStateEnumValues = []FinderPostExtState{
	"PUBLISHED",
	"REVIEW_REQ",
	"PAYMENT_REQ",
	"RETIRED",
}

func (v *FinderPostExtState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FinderPostExtState(value)
	for _, existing := range AllowedFinderPostExtStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FinderPostExtState", value)
}

// NewFinderPostExtStateFromValue returns a pointer to a valid FinderPostExtState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFinderPostExtStateFromValue(v string) (*FinderPostExtState, error) {
	ev := FinderPostExtState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FinderPostExtState: valid values are %v", v, AllowedFinderPostExtStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FinderPostExtState) IsValid() bool {
	for _, existing := range AllowedFinderPostExtStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to finderPostExtState value
func (v FinderPostExtState) Ptr() *FinderPostExtState {
	return &v
}

type NullableFinderPostExtState struct {
	value *FinderPostExtState
	isSet bool
}

func (v NullableFinderPostExtState) Get() *FinderPostExtState {
	return v.value
}

func (v *NullableFinderPostExtState) Set(val *FinderPostExtState) {
	v.value = val
	v.isSet = true
}

func (v NullableFinderPostExtState) IsSet() bool {
	return v.isSet
}

func (v *NullableFinderPostExtState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinderPostExtState(val *FinderPostExtState) *NullableFinderPostExtState {
	return &NullableFinderPostExtState{value: val, isSet: true}
}

func (v NullableFinderPostExtState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinderPostExtState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

