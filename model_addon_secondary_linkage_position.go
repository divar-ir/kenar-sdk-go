/*
divar_interface/open_platform/chatapi/chatapi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// AddonSecondaryLinkagePosition the model 'AddonSecondaryLinkagePosition'
type AddonSecondaryLinkagePosition string

// List of AddonSecondaryLinkagePosition
const (
	ADDONSECONDARYLINKAGEPOSITION_POST_SPEC_HEAD AddonSecondaryLinkagePosition = "POST_SPEC_HEAD"
	ADDONSECONDARYLINKAGEPOSITION_POST_SPEC_TAIL AddonSecondaryLinkagePosition = "POST_SPEC_TAIL"
	ADDONSECONDARYLINKAGEPOSITION_POST_PRICE_SPEC AddonSecondaryLinkagePosition = "POST_PRICE_SPEC"
	ADDONSECONDARYLINKAGEPOSITION_POST_DESC_TAIL AddonSecondaryLinkagePosition = "POST_DESC_TAIL"
)

// All allowed values of AddonSecondaryLinkagePosition enum
var AllowedAddonSecondaryLinkagePositionEnumValues = []AddonSecondaryLinkagePosition{
	"POST_SPEC_HEAD",
	"POST_SPEC_TAIL",
	"POST_PRICE_SPEC",
	"POST_DESC_TAIL",
}

func (v *AddonSecondaryLinkagePosition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddonSecondaryLinkagePosition(value)
	for _, existing := range AllowedAddonSecondaryLinkagePositionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddonSecondaryLinkagePosition", value)
}

// NewAddonSecondaryLinkagePositionFromValue returns a pointer to a valid AddonSecondaryLinkagePosition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddonSecondaryLinkagePositionFromValue(v string) (*AddonSecondaryLinkagePosition, error) {
	ev := AddonSecondaryLinkagePosition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddonSecondaryLinkagePosition: valid values are %v", v, AllowedAddonSecondaryLinkagePositionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddonSecondaryLinkagePosition) IsValid() bool {
	for _, existing := range AllowedAddonSecondaryLinkagePositionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AddonSecondaryLinkagePosition value
func (v AddonSecondaryLinkagePosition) Ptr() *AddonSecondaryLinkagePosition {
	return &v
}

type NullableAddonSecondaryLinkagePosition struct {
	value *AddonSecondaryLinkagePosition
	isSet bool
}

func (v NullableAddonSecondaryLinkagePosition) Get() *AddonSecondaryLinkagePosition {
	return v.value
}

func (v *NullableAddonSecondaryLinkagePosition) Set(val *AddonSecondaryLinkagePosition) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonSecondaryLinkagePosition) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonSecondaryLinkagePosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonSecondaryLinkagePosition(val *AddonSecondaryLinkagePosition) *NullableAddonSecondaryLinkagePosition {
	return &NullableAddonSecondaryLinkagePosition{value: val, isSet: true}
}

func (v NullableAddonSecondaryLinkagePosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonSecondaryLinkagePosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

