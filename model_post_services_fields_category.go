/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// PostServicesFieldsCategory The subcategory of the service
type PostServicesFieldsCategory string

// List of postServicesFieldsCategory
const (
	POSTSERVICESFIELDSCATEGORY_CATEGORY_CAR_AND_MOTOR PostServicesFieldsCategory = "CATEGORY_CAR_AND_MOTOR"
	POSTSERVICESFIELDSCATEGORY_CATEGORY_CATERING PostServicesFieldsCategory = "CATEGORY_CATERING"
	POSTSERVICESFIELDSCATEGORY_CATEGORY_COMPUTER_AND_MOBILE PostServicesFieldsCategory = "CATEGORY_COMPUTER_AND_MOBILE"
	POSTSERVICESFIELDSCATEGORY_CATEGORY_ACCOUNTING_AND_FINANCE PostServicesFieldsCategory = "CATEGORY_ACCOUNTING_AND_FINANCE"
	POSTSERVICESFIELDSCATEGORY_CATEGORY_TRANSPORT PostServicesFieldsCategory = "CATEGORY_TRANSPORT"
	POSTSERVICESFIELDSCATEGORY_CATEGORY_CRAFTSMEN PostServicesFieldsCategory = "CATEGORY_CRAFTSMEN"
	POSTSERVICESFIELDSCATEGORY_CATEGORY_BEAUTY_AND_HAIRCARE PostServicesFieldsCategory = "CATEGORY_BEAUTY_AND_HAIRCARE"
	POSTSERVICESFIELDSCATEGORY_CATEGORY_CLEANING PostServicesFieldsCategory = "CATEGORY_CLEANING"
	POSTSERVICESFIELDSCATEGORY_CATEGORY_GARDEN_AND_LANDSCAPING PostServicesFieldsCategory = "CATEGORY_GARDEN_AND_LANDSCAPING"
	POSTSERVICESFIELDSCATEGORY_CATEGORY_TEACHING PostServicesFieldsCategory = "CATEGORY_TEACHING"
)

// All allowed values of PostServicesFieldsCategory enum
var AllowedPostServicesFieldsCategoryEnumValues = []PostServicesFieldsCategory{
	"CATEGORY_CAR_AND_MOTOR",
	"CATEGORY_CATERING",
	"CATEGORY_COMPUTER_AND_MOBILE",
	"CATEGORY_ACCOUNTING_AND_FINANCE",
	"CATEGORY_TRANSPORT",
	"CATEGORY_CRAFTSMEN",
	"CATEGORY_BEAUTY_AND_HAIRCARE",
	"CATEGORY_CLEANING",
	"CATEGORY_GARDEN_AND_LANDSCAPING",
	"CATEGORY_TEACHING",
}

func (v *PostServicesFieldsCategory) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PostServicesFieldsCategory(value)
	for _, existing := range AllowedPostServicesFieldsCategoryEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PostServicesFieldsCategory", value)
}

// NewPostServicesFieldsCategoryFromValue returns a pointer to a valid PostServicesFieldsCategory
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPostServicesFieldsCategoryFromValue(v string) (*PostServicesFieldsCategory, error) {
	ev := PostServicesFieldsCategory(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PostServicesFieldsCategory: valid values are %v", v, AllowedPostServicesFieldsCategoryEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PostServicesFieldsCategory) IsValid() bool {
	for _, existing := range AllowedPostServicesFieldsCategoryEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to postServicesFieldsCategory value
func (v PostServicesFieldsCategory) Ptr() *PostServicesFieldsCategory {
	return &v
}

type NullablePostServicesFieldsCategory struct {
	value *PostServicesFieldsCategory
	isSet bool
}

func (v NullablePostServicesFieldsCategory) Get() *PostServicesFieldsCategory {
	return v.value
}

func (v *NullablePostServicesFieldsCategory) Set(val *PostServicesFieldsCategory) {
	v.value = val
	v.isSet = true
}

func (v NullablePostServicesFieldsCategory) IsSet() bool {
	return v.isSet
}

func (v *NullablePostServicesFieldsCategory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostServicesFieldsCategory(val *PostServicesFieldsCategory) *NullablePostServicesFieldsCategory {
	return &NullablePostServicesFieldsCategory{value: val, isSet: true}
}

func (v NullablePostServicesFieldsCategory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostServicesFieldsCategory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

