/*
divar_interface/open_platform/chatapi/chatapi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the EventsRegisterEventSubscriptionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventsRegisterEventSubscriptionRequest{}

// EventsRegisterEventSubscriptionRequest struct for EventsRegisterEventSubscriptionRequest
type EventsRegisterEventSubscriptionRequest struct {
	EventType *EventsRegisterEventSubscriptionRequestEventType `json:"event_type,omitempty"`
	EventResourceId *string `json:"event_resource_id,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// NewEventsRegisterEventSubscriptionRequest instantiates a new EventsRegisterEventSubscriptionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsRegisterEventSubscriptionRequest() *EventsRegisterEventSubscriptionRequest {
	this := EventsRegisterEventSubscriptionRequest{}
	return &this
}

// NewEventsRegisterEventSubscriptionRequestWithDefaults instantiates a new EventsRegisterEventSubscriptionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsRegisterEventSubscriptionRequestWithDefaults() *EventsRegisterEventSubscriptionRequest {
	this := EventsRegisterEventSubscriptionRequest{}
	return &this
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *EventsRegisterEventSubscriptionRequest) GetEventType() EventsRegisterEventSubscriptionRequestEventType {
	if o == nil || IsNil(o.EventType) {
		var ret EventsRegisterEventSubscriptionRequestEventType
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsRegisterEventSubscriptionRequest) GetEventTypeOk() (*EventsRegisterEventSubscriptionRequestEventType, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *EventsRegisterEventSubscriptionRequest) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given EventsRegisterEventSubscriptionRequestEventType and assigns it to the EventType field.
func (o *EventsRegisterEventSubscriptionRequest) SetEventType(v EventsRegisterEventSubscriptionRequestEventType) {
	o.EventType = &v
}

// GetEventResourceId returns the EventResourceId field value if set, zero value otherwise.
func (o *EventsRegisterEventSubscriptionRequest) GetEventResourceId() string {
	if o == nil || IsNil(o.EventResourceId) {
		var ret string
		return ret
	}
	return *o.EventResourceId
}

// GetEventResourceIdOk returns a tuple with the EventResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsRegisterEventSubscriptionRequest) GetEventResourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.EventResourceId) {
		return nil, false
	}
	return o.EventResourceId, true
}

// HasEventResourceId returns a boolean if a field has been set.
func (o *EventsRegisterEventSubscriptionRequest) HasEventResourceId() bool {
	if o != nil && !IsNil(o.EventResourceId) {
		return true
	}

	return false
}

// SetEventResourceId gets a reference to the given string and assigns it to the EventResourceId field.
func (o *EventsRegisterEventSubscriptionRequest) SetEventResourceId(v string) {
	o.EventResourceId = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *EventsRegisterEventSubscriptionRequest) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsRegisterEventSubscriptionRequest) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *EventsRegisterEventSubscriptionRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *EventsRegisterEventSubscriptionRequest) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o EventsRegisterEventSubscriptionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventsRegisterEventSubscriptionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}
	if !IsNil(o.EventResourceId) {
		toSerialize["event_resource_id"] = o.EventResourceId
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableEventsRegisterEventSubscriptionRequest struct {
	value *EventsRegisterEventSubscriptionRequest
	isSet bool
}

func (v NullableEventsRegisterEventSubscriptionRequest) Get() *EventsRegisterEventSubscriptionRequest {
	return v.value
}

func (v *NullableEventsRegisterEventSubscriptionRequest) Set(val *EventsRegisterEventSubscriptionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsRegisterEventSubscriptionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsRegisterEventSubscriptionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsRegisterEventSubscriptionRequest(val *EventsRegisterEventSubscriptionRequest) *NullableEventsRegisterEventSubscriptionRequest {
	return &NullableEventsRegisterEventSubscriptionRequest{value: val, isSet: true}
}

func (v NullableEventsRegisterEventSubscriptionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsRegisterEventSubscriptionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


