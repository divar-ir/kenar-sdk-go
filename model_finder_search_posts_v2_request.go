/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the FinderSearchPostsV2Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FinderSearchPostsV2Request{}

// FinderSearchPostsV2Request struct for FinderSearchPostsV2Request
type FinderSearchPostsV2Request struct {
	Category *string `json:"category,omitempty"`
	City *string `json:"city,omitempty"`
	Districts []string `json:"districts,omitempty"`
	Query *FinderSearchQuery `json:"query,omitempty"`
}

// NewFinderSearchPostsV2Request instantiates a new FinderSearchPostsV2Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinderSearchPostsV2Request() *FinderSearchPostsV2Request {
	this := FinderSearchPostsV2Request{}
	return &this
}

// NewFinderSearchPostsV2RequestWithDefaults instantiates a new FinderSearchPostsV2Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinderSearchPostsV2RequestWithDefaults() *FinderSearchPostsV2Request {
	this := FinderSearchPostsV2Request{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *FinderSearchPostsV2Request) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinderSearchPostsV2Request) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *FinderSearchPostsV2Request) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *FinderSearchPostsV2Request) SetCategory(v string) {
	o.Category = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *FinderSearchPostsV2Request) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinderSearchPostsV2Request) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *FinderSearchPostsV2Request) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *FinderSearchPostsV2Request) SetCity(v string) {
	o.City = &v
}

// GetDistricts returns the Districts field value if set, zero value otherwise.
func (o *FinderSearchPostsV2Request) GetDistricts() []string {
	if o == nil || IsNil(o.Districts) {
		var ret []string
		return ret
	}
	return o.Districts
}

// GetDistrictsOk returns a tuple with the Districts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinderSearchPostsV2Request) GetDistrictsOk() ([]string, bool) {
	if o == nil || IsNil(o.Districts) {
		return nil, false
	}
	return o.Districts, true
}

// HasDistricts returns a boolean if a field has been set.
func (o *FinderSearchPostsV2Request) HasDistricts() bool {
	if o != nil && !IsNil(o.Districts) {
		return true
	}

	return false
}

// SetDistricts gets a reference to the given []string and assigns it to the Districts field.
func (o *FinderSearchPostsV2Request) SetDistricts(v []string) {
	o.Districts = v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *FinderSearchPostsV2Request) GetQuery() FinderSearchQuery {
	if o == nil || IsNil(o.Query) {
		var ret FinderSearchQuery
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinderSearchPostsV2Request) GetQueryOk() (*FinderSearchQuery, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *FinderSearchPostsV2Request) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given FinderSearchQuery and assigns it to the Query field.
func (o *FinderSearchPostsV2Request) SetQuery(v FinderSearchQuery) {
	o.Query = &v
}

func (o FinderSearchPostsV2Request) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FinderSearchPostsV2Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Districts) {
		toSerialize["districts"] = o.Districts
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	return toSerialize, nil
}

type NullableFinderSearchPostsV2Request struct {
	value *FinderSearchPostsV2Request
	isSet bool
}

func (v NullableFinderSearchPostsV2Request) Get() *FinderSearchPostsV2Request {
	return v.value
}

func (v *NullableFinderSearchPostsV2Request) Set(val *FinderSearchPostsV2Request) {
	v.value = val
	v.isSet = true
}

func (v NullableFinderSearchPostsV2Request) IsSet() bool {
	return v.isSet
}

func (v *NullableFinderSearchPostsV2Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinderSearchPostsV2Request(val *FinderSearchPostsV2Request) *NullableFinderSearchPostsV2Request {
	return &NullableFinderSearchPostsV2Request{value: val, isSet: true}
}

func (v NullableFinderSearchPostsV2Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinderSearchPostsV2Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


