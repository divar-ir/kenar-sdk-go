/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// PremiumPanelBusinessDataSubBusinessType the model 'PremiumPanelBusinessDataSubBusinessType'
type PremiumPanelBusinessDataSubBusinessType string

// List of PremiumPanelBusinessDataSubBusinessType
const (
	PREMIUMPANELBUSINESSDATASUBBUSINESSTYPE_CAR PremiumPanelBusinessDataSubBusinessType = "CAR"
	PREMIUMPANELBUSINESSDATASUBBUSINESSTYPE_REAL_ESTATE PremiumPanelBusinessDataSubBusinessType = "REAL_ESTATE"
	PREMIUMPANELBUSINESSDATASUBBUSINESSTYPE_JOBS PremiumPanelBusinessDataSubBusinessType = "JOBS"
	PREMIUMPANELBUSINESSDATASUBBUSINESSTYPE_MARKETPLACE PremiumPanelBusinessDataSubBusinessType = "MARKETPLACE"
	PREMIUMPANELBUSINESSDATASUBBUSINESSTYPE_SERVICES PremiumPanelBusinessDataSubBusinessType = "SERVICES"
	PREMIUMPANELBUSINESSDATASUBBUSINESSTYPE_PERSONAL PremiumPanelBusinessDataSubBusinessType = "PERSONAL"
)

// All allowed values of PremiumPanelBusinessDataSubBusinessType enum
var AllowedPremiumPanelBusinessDataSubBusinessTypeEnumValues = []PremiumPanelBusinessDataSubBusinessType{
	"CAR",
	"REAL_ESTATE",
	"JOBS",
	"MARKETPLACE",
	"SERVICES",
	"PERSONAL",
}

func (v *PremiumPanelBusinessDataSubBusinessType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PremiumPanelBusinessDataSubBusinessType(value)
	for _, existing := range AllowedPremiumPanelBusinessDataSubBusinessTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PremiumPanelBusinessDataSubBusinessType", value)
}

// NewPremiumPanelBusinessDataSubBusinessTypeFromValue returns a pointer to a valid PremiumPanelBusinessDataSubBusinessType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPremiumPanelBusinessDataSubBusinessTypeFromValue(v string) (*PremiumPanelBusinessDataSubBusinessType, error) {
	ev := PremiumPanelBusinessDataSubBusinessType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PremiumPanelBusinessDataSubBusinessType: valid values are %v", v, AllowedPremiumPanelBusinessDataSubBusinessTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PremiumPanelBusinessDataSubBusinessType) IsValid() bool {
	for _, existing := range AllowedPremiumPanelBusinessDataSubBusinessTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PremiumPanelBusinessDataSubBusinessType value
func (v PremiumPanelBusinessDataSubBusinessType) Ptr() *PremiumPanelBusinessDataSubBusinessType {
	return &v
}

type NullablePremiumPanelBusinessDataSubBusinessType struct {
	value *PremiumPanelBusinessDataSubBusinessType
	isSet bool
}

func (v NullablePremiumPanelBusinessDataSubBusinessType) Get() *PremiumPanelBusinessDataSubBusinessType {
	return v.value
}

func (v *NullablePremiumPanelBusinessDataSubBusinessType) Set(val *PremiumPanelBusinessDataSubBusinessType) {
	v.value = val
	v.isSet = true
}

func (v NullablePremiumPanelBusinessDataSubBusinessType) IsSet() bool {
	return v.isSet
}

func (v *NullablePremiumPanelBusinessDataSubBusinessType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePremiumPanelBusinessDataSubBusinessType(val *PremiumPanelBusinessDataSubBusinessType) *NullablePremiumPanelBusinessDataSubBusinessType {
	return &NullablePremiumPanelBusinessDataSubBusinessType{value: val, isSet: true}
}

func (v NullablePremiumPanelBusinessDataSubBusinessType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePremiumPanelBusinessDataSubBusinessType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

