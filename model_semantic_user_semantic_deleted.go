/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the SemanticUserSemanticDeleted type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SemanticUserSemanticDeleted{}

// SemanticUserSemanticDeleted struct for SemanticUserSemanticDeleted
type SemanticUserSemanticDeleted struct {
	AppSlug *string `json:"app_slug,omitempty"`
	DivarUserId *string `json:"divar_user_id,omitempty"`
	Id *string `json:"id,omitempty"`
	Phone *string `json:"phone,omitempty"`
}

// NewSemanticUserSemanticDeleted instantiates a new SemanticUserSemanticDeleted object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSemanticUserSemanticDeleted() *SemanticUserSemanticDeleted {
	this := SemanticUserSemanticDeleted{}
	return &this
}

// NewSemanticUserSemanticDeletedWithDefaults instantiates a new SemanticUserSemanticDeleted object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSemanticUserSemanticDeletedWithDefaults() *SemanticUserSemanticDeleted {
	this := SemanticUserSemanticDeleted{}
	return &this
}

// GetAppSlug returns the AppSlug field value if set, zero value otherwise.
func (o *SemanticUserSemanticDeleted) GetAppSlug() string {
	if o == nil || IsNil(o.AppSlug) {
		var ret string
		return ret
	}
	return *o.AppSlug
}

// GetAppSlugOk returns a tuple with the AppSlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SemanticUserSemanticDeleted) GetAppSlugOk() (*string, bool) {
	if o == nil || IsNil(o.AppSlug) {
		return nil, false
	}
	return o.AppSlug, true
}

// HasAppSlug returns a boolean if a field has been set.
func (o *SemanticUserSemanticDeleted) HasAppSlug() bool {
	if o != nil && !IsNil(o.AppSlug) {
		return true
	}

	return false
}

// SetAppSlug gets a reference to the given string and assigns it to the AppSlug field.
func (o *SemanticUserSemanticDeleted) SetAppSlug(v string) {
	o.AppSlug = &v
}

// GetDivarUserId returns the DivarUserId field value if set, zero value otherwise.
func (o *SemanticUserSemanticDeleted) GetDivarUserId() string {
	if o == nil || IsNil(o.DivarUserId) {
		var ret string
		return ret
	}
	return *o.DivarUserId
}

// GetDivarUserIdOk returns a tuple with the DivarUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SemanticUserSemanticDeleted) GetDivarUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.DivarUserId) {
		return nil, false
	}
	return o.DivarUserId, true
}

// HasDivarUserId returns a boolean if a field has been set.
func (o *SemanticUserSemanticDeleted) HasDivarUserId() bool {
	if o != nil && !IsNil(o.DivarUserId) {
		return true
	}

	return false
}

// SetDivarUserId gets a reference to the given string and assigns it to the DivarUserId field.
func (o *SemanticUserSemanticDeleted) SetDivarUserId(v string) {
	o.DivarUserId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SemanticUserSemanticDeleted) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SemanticUserSemanticDeleted) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SemanticUserSemanticDeleted) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SemanticUserSemanticDeleted) SetId(v string) {
	o.Id = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *SemanticUserSemanticDeleted) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SemanticUserSemanticDeleted) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *SemanticUserSemanticDeleted) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *SemanticUserSemanticDeleted) SetPhone(v string) {
	o.Phone = &v
}

func (o SemanticUserSemanticDeleted) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SemanticUserSemanticDeleted) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppSlug) {
		toSerialize["app_slug"] = o.AppSlug
	}
	if !IsNil(o.DivarUserId) {
		toSerialize["divar_user_id"] = o.DivarUserId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	return toSerialize, nil
}

type NullableSemanticUserSemanticDeleted struct {
	value *SemanticUserSemanticDeleted
	isSet bool
}

func (v NullableSemanticUserSemanticDeleted) Get() *SemanticUserSemanticDeleted {
	return v.value
}

func (v *NullableSemanticUserSemanticDeleted) Set(val *SemanticUserSemanticDeleted) {
	v.value = val
	v.isSet = true
}

func (v NullableSemanticUserSemanticDeleted) IsSet() bool {
	return v.isSet
}

func (v *NullableSemanticUserSemanticDeleted) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSemanticUserSemanticDeleted(val *SemanticUserSemanticDeleted) *NullableSemanticUserSemanticDeleted {
	return &NullableSemanticUserSemanticDeleted{value: val, isSet: true}
}

func (v NullableSemanticUserSemanticDeleted) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSemanticUserSemanticDeleted) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


