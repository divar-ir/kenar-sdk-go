/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// PostRoomsCount Number of rooms in the residence
type PostRoomsCount string

// List of postRoomsCount
const (
	POSTROOMSCOUNT_ROOMS_COUNT_0 PostRoomsCount = "ROOMS_COUNT_0"
	POSTROOMSCOUNT_ROOMS_COUNT_1 PostRoomsCount = "ROOMS_COUNT_1"
	POSTROOMSCOUNT_ROOMS_COUNT_2 PostRoomsCount = "ROOMS_COUNT_2"
	POSTROOMSCOUNT_ROOMS_COUNT_3 PostRoomsCount = "ROOMS_COUNT_3"
	POSTROOMSCOUNT_ROOMS_COUNT_4 PostRoomsCount = "ROOMS_COUNT_4"
	POSTROOMSCOUNT_ROOMS_COUNT_5_OR_MORE PostRoomsCount = "ROOMS_COUNT_5_OR_MORE"
)

// All allowed values of PostRoomsCount enum
var AllowedPostRoomsCountEnumValues = []PostRoomsCount{
	"ROOMS_COUNT_0",
	"ROOMS_COUNT_1",
	"ROOMS_COUNT_2",
	"ROOMS_COUNT_3",
	"ROOMS_COUNT_4",
	"ROOMS_COUNT_5_OR_MORE",
}

func (v *PostRoomsCount) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PostRoomsCount(value)
	for _, existing := range AllowedPostRoomsCountEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PostRoomsCount", value)
}

// NewPostRoomsCountFromValue returns a pointer to a valid PostRoomsCount
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPostRoomsCountFromValue(v string) (*PostRoomsCount, error) {
	ev := PostRoomsCount(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PostRoomsCount: valid values are %v", v, AllowedPostRoomsCountEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PostRoomsCount) IsValid() bool {
	for _, existing := range AllowedPostRoomsCountEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to postRoomsCount value
func (v PostRoomsCount) Ptr() *PostRoomsCount {
	return &v
}

type NullablePostRoomsCount struct {
	value *PostRoomsCount
	isSet bool
}

func (v NullablePostRoomsCount) Get() *PostRoomsCount {
	return v.value
}

func (v *NullablePostRoomsCount) Set(val *PostRoomsCount) {
	v.value = val
	v.isSet = true
}

func (v NullablePostRoomsCount) IsSet() bool {
	return v.isSet
}

func (v *NullablePostRoomsCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostRoomsCount(val *PostRoomsCount) *NullablePostRoomsCount {
	return &NullablePostRoomsCount{value: val, isSet: true}
}

func (v NullablePostRoomsCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostRoomsCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

