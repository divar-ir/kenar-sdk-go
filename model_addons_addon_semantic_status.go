/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// AddonsAddonSemanticStatus the model 'AddonsAddonSemanticStatus'
type AddonsAddonSemanticStatus string

// List of addonsAddonSemanticStatus
const (
	ADDONSADDONSEMANTICSTATUS_SUCCEEDED AddonsAddonSemanticStatus = "SUCCEEDED"
	ADDONSADDONSEMANTICSTATUS_FAILED AddonsAddonSemanticStatus = "FAILED"
	ADDONSADDONSEMANTICSTATUS_EXPIRED AddonsAddonSemanticStatus = "EXPIRED"
	ADDONSADDONSEMANTICSTATUS_PENDING AddonsAddonSemanticStatus = "PENDING"
)

// All allowed values of AddonsAddonSemanticStatus enum
var AllowedAddonsAddonSemanticStatusEnumValues = []AddonsAddonSemanticStatus{
	"SUCCEEDED",
	"FAILED",
	"EXPIRED",
	"PENDING",
}

func (v *AddonsAddonSemanticStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddonsAddonSemanticStatus(value)
	for _, existing := range AllowedAddonsAddonSemanticStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddonsAddonSemanticStatus", value)
}

// NewAddonsAddonSemanticStatusFromValue returns a pointer to a valid AddonsAddonSemanticStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddonsAddonSemanticStatusFromValue(v string) (*AddonsAddonSemanticStatus, error) {
	ev := AddonsAddonSemanticStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddonsAddonSemanticStatus: valid values are %v", v, AllowedAddonsAddonSemanticStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddonsAddonSemanticStatus) IsValid() bool {
	for _, existing := range AllowedAddonsAddonSemanticStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to addonsAddonSemanticStatus value
func (v AddonsAddonSemanticStatus) Ptr() *AddonsAddonSemanticStatus {
	return &v
}

type NullableAddonsAddonSemanticStatus struct {
	value *AddonsAddonSemanticStatus
	isSet bool
}

func (v NullableAddonsAddonSemanticStatus) Get() *AddonsAddonSemanticStatus {
	return v.value
}

func (v *NullableAddonsAddonSemanticStatus) Set(val *AddonsAddonSemanticStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonsAddonSemanticStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonsAddonSemanticStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonsAddonSemanticStatus(val *AddonsAddonSemanticStatus) *NullableAddonsAddonSemanticStatus {
	return &NullableAddonsAddonSemanticStatus{value: val, isSet: true}
}

func (v NullableAddonsAddonSemanticStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonsAddonSemanticStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

