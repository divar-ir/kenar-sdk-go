/*
divar_interface/open_platform/chatapi/chatapi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the FinderUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FinderUser{}

// FinderUser struct for FinderUser
type FinderUser struct {
	// deprecated
	PhoneNumbers []string `json:"phone_numbers,omitempty"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	UserId *string `json:"user_id,omitempty"`
}

// NewFinderUser instantiates a new FinderUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinderUser() *FinderUser {
	this := FinderUser{}
	return &this
}

// NewFinderUserWithDefaults instantiates a new FinderUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinderUserWithDefaults() *FinderUser {
	this := FinderUser{}
	return &this
}

// GetPhoneNumbers returns the PhoneNumbers field value if set, zero value otherwise.
func (o *FinderUser) GetPhoneNumbers() []string {
	if o == nil || IsNil(o.PhoneNumbers) {
		var ret []string
		return ret
	}
	return o.PhoneNumbers
}

// GetPhoneNumbersOk returns a tuple with the PhoneNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinderUser) GetPhoneNumbersOk() ([]string, bool) {
	if o == nil || IsNil(o.PhoneNumbers) {
		return nil, false
	}
	return o.PhoneNumbers, true
}

// HasPhoneNumbers returns a boolean if a field has been set.
func (o *FinderUser) HasPhoneNumbers() bool {
	if o != nil && !IsNil(o.PhoneNumbers) {
		return true
	}

	return false
}

// SetPhoneNumbers gets a reference to the given []string and assigns it to the PhoneNumbers field.
func (o *FinderUser) SetPhoneNumbers(v []string) {
	o.PhoneNumbers = v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *FinderUser) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinderUser) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *FinderUser) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *FinderUser) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *FinderUser) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinderUser) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *FinderUser) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *FinderUser) SetUserId(v string) {
	o.UserId = &v
}

func (o FinderUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FinderUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PhoneNumbers) {
		toSerialize["phone_numbers"] = o.PhoneNumbers
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phone_number"] = o.PhoneNumber
	}
	if !IsNil(o.UserId) {
		toSerialize["user_id"] = o.UserId
	}
	return toSerialize, nil
}

type NullableFinderUser struct {
	value *FinderUser
	isSet bool
}

func (v NullableFinderUser) Get() *FinderUser {
	return v.value
}

func (v *NullableFinderUser) Set(val *FinderUser) {
	v.value = val
	v.isSet = true
}

func (v NullableFinderUser) IsSet() bool {
	return v.isSet
}

func (v *NullableFinderUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinderUser(val *FinderUser) *NullableFinderUser {
	return &NullableFinderUser{value: val, isSet: true}
}

func (v NullableFinderUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinderUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


