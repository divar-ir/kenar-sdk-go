/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// AppsServiceTag the model 'AppsServiceTag'
type AppsServiceTag string

// List of appsServiceTag
const (
	APPSSERVICETAG_VERIFIED AppsServiceTag = "VERIFIED"
	APPSSERVICETAG_IDENTITY_VERIFIED AppsServiceTag = "IDENTITY_VERIFIED"
	APPSSERVICETAG_POST_VERIFIED AppsServiceTag = "POST_VERIFIED"
	APPSSERVICETAG_SECURE_PAYMENT AppsServiceTag = "SECURE_PAYMENT"
	APPSSERVICETAG_POST_OWNERSHIP_VERIFIED AppsServiceTag = "POST_OWNERSHIP_VERIFIED"
	APPSSERVICETAG_EXPERT_INSPECTED AppsServiceTag = "EXPERT_INSPECTED"
	APPSSERVICETAG_CAR_EXPERT_INSPECTED AppsServiceTag = "CAR_EXPERT_INSPECTED"
	APPSSERVICETAG_HOME_EXPERT_INSPECTED AppsServiceTag = "HOME_EXPERT_INSPECTED"
	APPSSERVICETAG_MOBILE_EXPERT_INSPECTED AppsServiceTag = "MOBILE_EXPERT_INSPECTED"
	APPSSERVICETAG_ONLINE_RESERVATION AppsServiceTag = "ONLINE_RESERVATION"
)

// All allowed values of AppsServiceTag enum
var AllowedAppsServiceTagEnumValues = []AppsServiceTag{
	"VERIFIED",
	"IDENTITY_VERIFIED",
	"POST_VERIFIED",
	"SECURE_PAYMENT",
	"POST_OWNERSHIP_VERIFIED",
	"EXPERT_INSPECTED",
	"CAR_EXPERT_INSPECTED",
	"HOME_EXPERT_INSPECTED",
	"MOBILE_EXPERT_INSPECTED",
	"ONLINE_RESERVATION",
}

func (v *AppsServiceTag) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppsServiceTag(value)
	for _, existing := range AllowedAppsServiceTagEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppsServiceTag", value)
}

// NewAppsServiceTagFromValue returns a pointer to a valid AppsServiceTag
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppsServiceTagFromValue(v string) (*AppsServiceTag, error) {
	ev := AppsServiceTag(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppsServiceTag: valid values are %v", v, AllowedAppsServiceTagEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppsServiceTag) IsValid() bool {
	for _, existing := range AllowedAppsServiceTagEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to appsServiceTag value
func (v AppsServiceTag) Ptr() *AppsServiceTag {
	return &v
}

type NullableAppsServiceTag struct {
	value *AppsServiceTag
	isSet bool
}

func (v NullableAppsServiceTag) Get() *AppsServiceTag {
	return v.value
}

func (v *NullableAppsServiceTag) Set(val *AppsServiceTag) {
	v.value = val
	v.isSet = true
}

func (v NullableAppsServiceTag) IsSet() bool {
	return v.isSet
}

func (v *NullableAppsServiceTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppsServiceTag(val *AppsServiceTag) *NullableAppsServiceTag {
	return &NullableAppsServiceTag{value: val, isSet: true}
}

func (v NullableAppsServiceTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppsServiceTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

