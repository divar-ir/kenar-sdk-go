/*
divar_interface/open_platform/chatapi/chatapi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the AddonsEventRow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddonsEventRow{}

// AddonsEventRow struct for AddonsEventRow
type AddonsEventRow struct {
	Title *string `json:"title,omitempty"`
	Subtitle *string `json:"subtitle,omitempty"`
	Label *string `json:"label,omitempty"`
	ImageId *string `json:"image_id,omitempty"`
	HasDivider *bool `json:"has_divider,omitempty"`
	IconName *DivarIconsIconName `json:"icon_name,omitempty"`
}

// NewAddonsEventRow instantiates a new AddonsEventRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonsEventRow() *AddonsEventRow {
	this := AddonsEventRow{}
	return &this
}

// NewAddonsEventRowWithDefaults instantiates a new AddonsEventRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonsEventRowWithDefaults() *AddonsEventRow {
	this := AddonsEventRow{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *AddonsEventRow) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsEventRow) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *AddonsEventRow) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *AddonsEventRow) SetTitle(v string) {
	o.Title = &v
}

// GetSubtitle returns the Subtitle field value if set, zero value otherwise.
func (o *AddonsEventRow) GetSubtitle() string {
	if o == nil || IsNil(o.Subtitle) {
		var ret string
		return ret
	}
	return *o.Subtitle
}

// GetSubtitleOk returns a tuple with the Subtitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsEventRow) GetSubtitleOk() (*string, bool) {
	if o == nil || IsNil(o.Subtitle) {
		return nil, false
	}
	return o.Subtitle, true
}

// HasSubtitle returns a boolean if a field has been set.
func (o *AddonsEventRow) HasSubtitle() bool {
	if o != nil && !IsNil(o.Subtitle) {
		return true
	}

	return false
}

// SetSubtitle gets a reference to the given string and assigns it to the Subtitle field.
func (o *AddonsEventRow) SetSubtitle(v string) {
	o.Subtitle = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *AddonsEventRow) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsEventRow) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *AddonsEventRow) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *AddonsEventRow) SetLabel(v string) {
	o.Label = &v
}

// GetImageId returns the ImageId field value if set, zero value otherwise.
func (o *AddonsEventRow) GetImageId() string {
	if o == nil || IsNil(o.ImageId) {
		var ret string
		return ret
	}
	return *o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsEventRow) GetImageIdOk() (*string, bool) {
	if o == nil || IsNil(o.ImageId) {
		return nil, false
	}
	return o.ImageId, true
}

// HasImageId returns a boolean if a field has been set.
func (o *AddonsEventRow) HasImageId() bool {
	if o != nil && !IsNil(o.ImageId) {
		return true
	}

	return false
}

// SetImageId gets a reference to the given string and assigns it to the ImageId field.
func (o *AddonsEventRow) SetImageId(v string) {
	o.ImageId = &v
}

// GetHasDivider returns the HasDivider field value if set, zero value otherwise.
func (o *AddonsEventRow) GetHasDivider() bool {
	if o == nil || IsNil(o.HasDivider) {
		var ret bool
		return ret
	}
	return *o.HasDivider
}

// GetHasDividerOk returns a tuple with the HasDivider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsEventRow) GetHasDividerOk() (*bool, bool) {
	if o == nil || IsNil(o.HasDivider) {
		return nil, false
	}
	return o.HasDivider, true
}

// HasHasDivider returns a boolean if a field has been set.
func (o *AddonsEventRow) HasHasDivider() bool {
	if o != nil && !IsNil(o.HasDivider) {
		return true
	}

	return false
}

// SetHasDivider gets a reference to the given bool and assigns it to the HasDivider field.
func (o *AddonsEventRow) SetHasDivider(v bool) {
	o.HasDivider = &v
}

// GetIconName returns the IconName field value if set, zero value otherwise.
func (o *AddonsEventRow) GetIconName() DivarIconsIconName {
	if o == nil || IsNil(o.IconName) {
		var ret DivarIconsIconName
		return ret
	}
	return *o.IconName
}

// GetIconNameOk returns a tuple with the IconName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsEventRow) GetIconNameOk() (*DivarIconsIconName, bool) {
	if o == nil || IsNil(o.IconName) {
		return nil, false
	}
	return o.IconName, true
}

// HasIconName returns a boolean if a field has been set.
func (o *AddonsEventRow) HasIconName() bool {
	if o != nil && !IsNil(o.IconName) {
		return true
	}

	return false
}

// SetIconName gets a reference to the given DivarIconsIconName and assigns it to the IconName field.
func (o *AddonsEventRow) SetIconName(v DivarIconsIconName) {
	o.IconName = &v
}

func (o AddonsEventRow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddonsEventRow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Subtitle) {
		toSerialize["subtitle"] = o.Subtitle
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.ImageId) {
		toSerialize["image_id"] = o.ImageId
	}
	if !IsNil(o.HasDivider) {
		toSerialize["has_divider"] = o.HasDivider
	}
	if !IsNil(o.IconName) {
		toSerialize["icon_name"] = o.IconName
	}
	return toSerialize, nil
}

type NullableAddonsEventRow struct {
	value *AddonsEventRow
	isSet bool
}

func (v NullableAddonsEventRow) Get() *AddonsEventRow {
	return v.value
}

func (v *NullableAddonsEventRow) Set(val *AddonsEventRow) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonsEventRow) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonsEventRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonsEventRow(val *AddonsEventRow) *NullableAddonsEventRow {
	return &NullableAddonsEventRow{value: val, isSet: true}
}

func (v NullableAddonsEventRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonsEventRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


