/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the PostEditPostBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostEditPostBody{}

// PostEditPostBody struct for PostEditPostBody
type PostEditPostBody struct {
	Description *string `json:"description,omitempty"`
	ImagePaths []string `json:"image_paths,omitempty"`
	Title *string `json:"title,omitempty"`
}

// NewPostEditPostBody instantiates a new PostEditPostBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostEditPostBody() *PostEditPostBody {
	this := PostEditPostBody{}
	return &this
}

// NewPostEditPostBodyWithDefaults instantiates a new PostEditPostBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostEditPostBodyWithDefaults() *PostEditPostBody {
	this := PostEditPostBody{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PostEditPostBody) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostEditPostBody) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PostEditPostBody) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PostEditPostBody) SetDescription(v string) {
	o.Description = &v
}

// GetImagePaths returns the ImagePaths field value if set, zero value otherwise.
func (o *PostEditPostBody) GetImagePaths() []string {
	if o == nil || IsNil(o.ImagePaths) {
		var ret []string
		return ret
	}
	return o.ImagePaths
}

// GetImagePathsOk returns a tuple with the ImagePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostEditPostBody) GetImagePathsOk() ([]string, bool) {
	if o == nil || IsNil(o.ImagePaths) {
		return nil, false
	}
	return o.ImagePaths, true
}

// HasImagePaths returns a boolean if a field has been set.
func (o *PostEditPostBody) HasImagePaths() bool {
	if o != nil && !IsNil(o.ImagePaths) {
		return true
	}

	return false
}

// SetImagePaths gets a reference to the given []string and assigns it to the ImagePaths field.
func (o *PostEditPostBody) SetImagePaths(v []string) {
	o.ImagePaths = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *PostEditPostBody) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostEditPostBody) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *PostEditPostBody) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *PostEditPostBody) SetTitle(v string) {
	o.Title = &v
}

func (o PostEditPostBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostEditPostBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.ImagePaths) {
		toSerialize["image_paths"] = o.ImagePaths
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullablePostEditPostBody struct {
	value *PostEditPostBody
	isSet bool
}

func (v NullablePostEditPostBody) Get() *PostEditPostBody {
	return v.value
}

func (v *NullablePostEditPostBody) Set(val *PostEditPostBody) {
	v.value = val
	v.isSet = true
}

func (v NullablePostEditPostBody) IsSet() bool {
	return v.isSet
}

func (v *NullablePostEditPostBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostEditPostBody(val *PostEditPostBody) *NullablePostEditPostBody {
	return &NullablePostEditPostBody{value: val, isSet: true}
}

func (v NullablePostEditPostBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostEditPostBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


