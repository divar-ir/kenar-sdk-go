/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PostEditPostBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostEditPostBody{}

// PostEditPostBody struct for PostEditPostBody
type PostEditPostBody struct {
	Description string `json:"description"`
	Title string `json:"title"`
	ImagePaths []string `json:"image_paths,omitempty"`
}

type _PostEditPostBody PostEditPostBody

// NewPostEditPostBody instantiates a new PostEditPostBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostEditPostBody(description string, title string) *PostEditPostBody {
	this := PostEditPostBody{}
	this.Description = description
	this.Title = title
	return &this
}

// NewPostEditPostBodyWithDefaults instantiates a new PostEditPostBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostEditPostBodyWithDefaults() *PostEditPostBody {
	this := PostEditPostBody{}
	return &this
}

// GetDescription returns the Description field value
func (o *PostEditPostBody) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *PostEditPostBody) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *PostEditPostBody) SetDescription(v string) {
	o.Description = v
}

// GetTitle returns the Title field value
func (o *PostEditPostBody) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *PostEditPostBody) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *PostEditPostBody) SetTitle(v string) {
	o.Title = v
}

// GetImagePaths returns the ImagePaths field value if set, zero value otherwise.
func (o *PostEditPostBody) GetImagePaths() []string {
	if o == nil || IsNil(o.ImagePaths) {
		var ret []string
		return ret
	}
	return o.ImagePaths
}

// GetImagePathsOk returns a tuple with the ImagePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostEditPostBody) GetImagePathsOk() ([]string, bool) {
	if o == nil || IsNil(o.ImagePaths) {
		return nil, false
	}
	return o.ImagePaths, true
}

// HasImagePaths returns a boolean if a field has been set.
func (o *PostEditPostBody) HasImagePaths() bool {
	if o != nil && !IsNil(o.ImagePaths) {
		return true
	}

	return false
}

// SetImagePaths gets a reference to the given []string and assigns it to the ImagePaths field.
func (o *PostEditPostBody) SetImagePaths(v []string) {
	o.ImagePaths = v
}

func (o PostEditPostBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostEditPostBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["title"] = o.Title
	if !IsNil(o.ImagePaths) {
		toSerialize["image_paths"] = o.ImagePaths
	}
	return toSerialize, nil
}

func (o *PostEditPostBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPostEditPostBody := _PostEditPostBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPostEditPostBody)

	if err != nil {
		return err
	}

	*o = PostEditPostBody(varPostEditPostBody)

	return err
}

type NullablePostEditPostBody struct {
	value *PostEditPostBody
	isSet bool
}

func (v NullablePostEditPostBody) Get() *PostEditPostBody {
	return v.value
}

func (v *NullablePostEditPostBody) Set(val *PostEditPostBody) {
	v.value = val
	v.isSet = true
}

func (v NullablePostEditPostBody) IsSet() bool {
	return v.isSet
}

func (v *NullablePostEditPostBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostEditPostBody(val *PostEditPostBody) *NullablePostEditPostBody {
	return &NullablePostEditPostBody{value: val, isSet: true}
}

func (v NullablePostEditPostBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostEditPostBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


