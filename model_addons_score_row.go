/*
divar_interface/open_platform/chatapi/chatapi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the AddonsScoreRow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddonsScoreRow{}

// AddonsScoreRow struct for AddonsScoreRow
type AddonsScoreRow struct {
	Title *string `json:"title,omitempty"`
	DescriptiveScore *string `json:"descriptive_score,omitempty"`
	PercentageScore *int32 `json:"percentage_score,omitempty"`
	ScoreColor *AddonsWidgetColor `json:"score_color,omitempty"`
	HasDivider *bool `json:"has_divider,omitempty"`
	IconName *DivarIconsIconName `json:"icon_name,omitempty"`
	Action *AddonsAction `json:"action,omitempty"`
}

// NewAddonsScoreRow instantiates a new AddonsScoreRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonsScoreRow() *AddonsScoreRow {
	this := AddonsScoreRow{}
	return &this
}

// NewAddonsScoreRowWithDefaults instantiates a new AddonsScoreRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonsScoreRowWithDefaults() *AddonsScoreRow {
	this := AddonsScoreRow{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *AddonsScoreRow) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsScoreRow) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *AddonsScoreRow) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *AddonsScoreRow) SetTitle(v string) {
	o.Title = &v
}

// GetDescriptiveScore returns the DescriptiveScore field value if set, zero value otherwise.
func (o *AddonsScoreRow) GetDescriptiveScore() string {
	if o == nil || IsNil(o.DescriptiveScore) {
		var ret string
		return ret
	}
	return *o.DescriptiveScore
}

// GetDescriptiveScoreOk returns a tuple with the DescriptiveScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsScoreRow) GetDescriptiveScoreOk() (*string, bool) {
	if o == nil || IsNil(o.DescriptiveScore) {
		return nil, false
	}
	return o.DescriptiveScore, true
}

// HasDescriptiveScore returns a boolean if a field has been set.
func (o *AddonsScoreRow) HasDescriptiveScore() bool {
	if o != nil && !IsNil(o.DescriptiveScore) {
		return true
	}

	return false
}

// SetDescriptiveScore gets a reference to the given string and assigns it to the DescriptiveScore field.
func (o *AddonsScoreRow) SetDescriptiveScore(v string) {
	o.DescriptiveScore = &v
}

// GetPercentageScore returns the PercentageScore field value if set, zero value otherwise.
func (o *AddonsScoreRow) GetPercentageScore() int32 {
	if o == nil || IsNil(o.PercentageScore) {
		var ret int32
		return ret
	}
	return *o.PercentageScore
}

// GetPercentageScoreOk returns a tuple with the PercentageScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsScoreRow) GetPercentageScoreOk() (*int32, bool) {
	if o == nil || IsNil(o.PercentageScore) {
		return nil, false
	}
	return o.PercentageScore, true
}

// HasPercentageScore returns a boolean if a field has been set.
func (o *AddonsScoreRow) HasPercentageScore() bool {
	if o != nil && !IsNil(o.PercentageScore) {
		return true
	}

	return false
}

// SetPercentageScore gets a reference to the given int32 and assigns it to the PercentageScore field.
func (o *AddonsScoreRow) SetPercentageScore(v int32) {
	o.PercentageScore = &v
}

// GetScoreColor returns the ScoreColor field value if set, zero value otherwise.
func (o *AddonsScoreRow) GetScoreColor() AddonsWidgetColor {
	if o == nil || IsNil(o.ScoreColor) {
		var ret AddonsWidgetColor
		return ret
	}
	return *o.ScoreColor
}

// GetScoreColorOk returns a tuple with the ScoreColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsScoreRow) GetScoreColorOk() (*AddonsWidgetColor, bool) {
	if o == nil || IsNil(o.ScoreColor) {
		return nil, false
	}
	return o.ScoreColor, true
}

// HasScoreColor returns a boolean if a field has been set.
func (o *AddonsScoreRow) HasScoreColor() bool {
	if o != nil && !IsNil(o.ScoreColor) {
		return true
	}

	return false
}

// SetScoreColor gets a reference to the given AddonsWidgetColor and assigns it to the ScoreColor field.
func (o *AddonsScoreRow) SetScoreColor(v AddonsWidgetColor) {
	o.ScoreColor = &v
}

// GetHasDivider returns the HasDivider field value if set, zero value otherwise.
func (o *AddonsScoreRow) GetHasDivider() bool {
	if o == nil || IsNil(o.HasDivider) {
		var ret bool
		return ret
	}
	return *o.HasDivider
}

// GetHasDividerOk returns a tuple with the HasDivider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsScoreRow) GetHasDividerOk() (*bool, bool) {
	if o == nil || IsNil(o.HasDivider) {
		return nil, false
	}
	return o.HasDivider, true
}

// HasHasDivider returns a boolean if a field has been set.
func (o *AddonsScoreRow) HasHasDivider() bool {
	if o != nil && !IsNil(o.HasDivider) {
		return true
	}

	return false
}

// SetHasDivider gets a reference to the given bool and assigns it to the HasDivider field.
func (o *AddonsScoreRow) SetHasDivider(v bool) {
	o.HasDivider = &v
}

// GetIconName returns the IconName field value if set, zero value otherwise.
func (o *AddonsScoreRow) GetIconName() DivarIconsIconName {
	if o == nil || IsNil(o.IconName) {
		var ret DivarIconsIconName
		return ret
	}
	return *o.IconName
}

// GetIconNameOk returns a tuple with the IconName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsScoreRow) GetIconNameOk() (*DivarIconsIconName, bool) {
	if o == nil || IsNil(o.IconName) {
		return nil, false
	}
	return o.IconName, true
}

// HasIconName returns a boolean if a field has been set.
func (o *AddonsScoreRow) HasIconName() bool {
	if o != nil && !IsNil(o.IconName) {
		return true
	}

	return false
}

// SetIconName gets a reference to the given DivarIconsIconName and assigns it to the IconName field.
func (o *AddonsScoreRow) SetIconName(v DivarIconsIconName) {
	o.IconName = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *AddonsScoreRow) GetAction() AddonsAction {
	if o == nil || IsNil(o.Action) {
		var ret AddonsAction
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsScoreRow) GetActionOk() (*AddonsAction, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *AddonsScoreRow) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given AddonsAction and assigns it to the Action field.
func (o *AddonsScoreRow) SetAction(v AddonsAction) {
	o.Action = &v
}

func (o AddonsScoreRow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddonsScoreRow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.DescriptiveScore) {
		toSerialize["descriptive_score"] = o.DescriptiveScore
	}
	if !IsNil(o.PercentageScore) {
		toSerialize["percentage_score"] = o.PercentageScore
	}
	if !IsNil(o.ScoreColor) {
		toSerialize["score_color"] = o.ScoreColor
	}
	if !IsNil(o.HasDivider) {
		toSerialize["has_divider"] = o.HasDivider
	}
	if !IsNil(o.IconName) {
		toSerialize["icon_name"] = o.IconName
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	return toSerialize, nil
}

type NullableAddonsScoreRow struct {
	value *AddonsScoreRow
	isSet bool
}

func (v NullableAddonsScoreRow) Get() *AddonsScoreRow {
	return v.value
}

func (v *NullableAddonsScoreRow) Set(val *AddonsScoreRow) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonsScoreRow) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonsScoreRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonsScoreRow(val *AddonsScoreRow) *NullableAddonsScoreRow {
	return &NullableAddonsScoreRow{value: val, isSet: true}
}

func (v NullableAddonsScoreRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonsScoreRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


