/*
divar_interface/open_platform/chatapi/chatapi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// AddonsWidgetColor the model 'AddonsWidgetColor'
type AddonsWidgetColor string

// List of addonsWidgetColor
const (
	ADDONSWIDGETCOLOR_WARNING_SECONDARY AddonsWidgetColor = "WARNING_SECONDARY"
	ADDONSWIDGETCOLOR_WARNING_PRIMARY AddonsWidgetColor = "WARNING_PRIMARY"
	ADDONSWIDGETCOLOR_ERROR_PRIMARY AddonsWidgetColor = "ERROR_PRIMARY"
	ADDONSWIDGETCOLOR_SUCCESS_PRIMARY AddonsWidgetColor = "SUCCESS_PRIMARY"
	ADDONSWIDGETCOLOR_SUCCESS_SECONDARY AddonsWidgetColor = "SUCCESS_SECONDARY"
)

// All allowed values of AddonsWidgetColor enum
var AllowedAddonsWidgetColorEnumValues = []AddonsWidgetColor{
	"WARNING_SECONDARY",
	"WARNING_PRIMARY",
	"ERROR_PRIMARY",
	"SUCCESS_PRIMARY",
	"SUCCESS_SECONDARY",
}

func (v *AddonsWidgetColor) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddonsWidgetColor(value)
	for _, existing := range AllowedAddonsWidgetColorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddonsWidgetColor", value)
}

// NewAddonsWidgetColorFromValue returns a pointer to a valid AddonsWidgetColor
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddonsWidgetColorFromValue(v string) (*AddonsWidgetColor, error) {
	ev := AddonsWidgetColor(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddonsWidgetColor: valid values are %v", v, AllowedAddonsWidgetColorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddonsWidgetColor) IsValid() bool {
	for _, existing := range AllowedAddonsWidgetColorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to addonsWidgetColor value
func (v AddonsWidgetColor) Ptr() *AddonsWidgetColor {
	return &v
}

type NullableAddonsWidgetColor struct {
	value *AddonsWidgetColor
	isSet bool
}

func (v NullableAddonsWidgetColor) Get() *AddonsWidgetColor {
	return v.value
}

func (v *NullableAddonsWidgetColor) Set(val *AddonsWidgetColor) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonsWidgetColor) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonsWidgetColor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonsWidgetColor(val *AddonsWidgetColor) *NullableAddonsWidgetColor {
	return &NullableAddonsWidgetColor{value: val, isSet: true}
}

func (v NullableAddonsWidgetColor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonsWidgetColor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

