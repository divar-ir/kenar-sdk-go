/*
divar_interface/open_platform/chatapi/chatapi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// AddonSemanticCarVerificationStage the model 'AddonSemanticCarVerificationStage'
type AddonSemanticCarVerificationStage string

// List of AddonSemanticCarVerificationStage
const (
	ADDONSEMANTICCARVERIFICATIONSTAGE_CARVERIFICATIONSTAGE_NOT_STARTED AddonSemanticCarVerificationStage = "CARVERIFICATIONSTAGE_NOT_STARTED"
	ADDONSEMANTICCARVERIFICATIONSTAGE_CARVERIFICATIONSTAGE_SHAHKAR AddonSemanticCarVerificationStage = "CARVERIFICATIONSTAGE_SHAHKAR"
	ADDONSEMANTICCARVERIFICATIONSTAGE_CAR_CARD_VERIFICATION AddonSemanticCarVerificationStage = "CAR_CARD_VERIFICATION"
	ADDONSEMANTICCARVERIFICATIONSTAGE_CAR_MODEL_VERIFICATION AddonSemanticCarVerificationStage = "CAR_MODEL_VERIFICATION"
)

// All allowed values of AddonSemanticCarVerificationStage enum
var AllowedAddonSemanticCarVerificationStageEnumValues = []AddonSemanticCarVerificationStage{
	"CARVERIFICATIONSTAGE_NOT_STARTED",
	"CARVERIFICATIONSTAGE_SHAHKAR",
	"CAR_CARD_VERIFICATION",
	"CAR_MODEL_VERIFICATION",
}

func (v *AddonSemanticCarVerificationStage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddonSemanticCarVerificationStage(value)
	for _, existing := range AllowedAddonSemanticCarVerificationStageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddonSemanticCarVerificationStage", value)
}

// NewAddonSemanticCarVerificationStageFromValue returns a pointer to a valid AddonSemanticCarVerificationStage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddonSemanticCarVerificationStageFromValue(v string) (*AddonSemanticCarVerificationStage, error) {
	ev := AddonSemanticCarVerificationStage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddonSemanticCarVerificationStage: valid values are %v", v, AllowedAddonSemanticCarVerificationStageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddonSemanticCarVerificationStage) IsValid() bool {
	for _, existing := range AllowedAddonSemanticCarVerificationStageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AddonSemanticCarVerificationStage value
func (v AddonSemanticCarVerificationStage) Ptr() *AddonSemanticCarVerificationStage {
	return &v
}

type NullableAddonSemanticCarVerificationStage struct {
	value *AddonSemanticCarVerificationStage
	isSet bool
}

func (v NullableAddonSemanticCarVerificationStage) Get() *AddonSemanticCarVerificationStage {
	return v.value
}

func (v *NullableAddonSemanticCarVerificationStage) Set(val *AddonSemanticCarVerificationStage) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonSemanticCarVerificationStage) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonSemanticCarVerificationStage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonSemanticCarVerificationStage(val *AddonSemanticCarVerificationStage) *NullableAddonSemanticCarVerificationStage {
	return &NullableAddonSemanticCarVerificationStage{value: val, isSet: true}
}

func (v NullableAddonSemanticCarVerificationStage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonSemanticCarVerificationStage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

