/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the ChatapiConversation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatapiConversation{}

// ChatapiConversation struct for ChatapiConversation
type ChatapiConversation struct {
	Id *string `json:"id,omitempty"`
	Type *ChatapiConversationType `json:"type,omitempty"`
	PostToken *string `json:"post_token,omitempty"`
}

// NewChatapiConversation instantiates a new ChatapiConversation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatapiConversation() *ChatapiConversation {
	this := ChatapiConversation{}
	return &this
}

// NewChatapiConversationWithDefaults instantiates a new ChatapiConversation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatapiConversationWithDefaults() *ChatapiConversation {
	this := ChatapiConversation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ChatapiConversation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatapiConversation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ChatapiConversation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ChatapiConversation) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ChatapiConversation) GetType() ChatapiConversationType {
	if o == nil || IsNil(o.Type) {
		var ret ChatapiConversationType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatapiConversation) GetTypeOk() (*ChatapiConversationType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ChatapiConversation) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ChatapiConversationType and assigns it to the Type field.
func (o *ChatapiConversation) SetType(v ChatapiConversationType) {
	o.Type = &v
}

// GetPostToken returns the PostToken field value if set, zero value otherwise.
func (o *ChatapiConversation) GetPostToken() string {
	if o == nil || IsNil(o.PostToken) {
		var ret string
		return ret
	}
	return *o.PostToken
}

// GetPostTokenOk returns a tuple with the PostToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatapiConversation) GetPostTokenOk() (*string, bool) {
	if o == nil || IsNil(o.PostToken) {
		return nil, false
	}
	return o.PostToken, true
}

// HasPostToken returns a boolean if a field has been set.
func (o *ChatapiConversation) HasPostToken() bool {
	if o != nil && !IsNil(o.PostToken) {
		return true
	}

	return false
}

// SetPostToken gets a reference to the given string and assigns it to the PostToken field.
func (o *ChatapiConversation) SetPostToken(v string) {
	o.PostToken = &v
}

func (o ChatapiConversation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatapiConversation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.PostToken) {
		toSerialize["post_token"] = o.PostToken
	}
	return toSerialize, nil
}

type NullableChatapiConversation struct {
	value *ChatapiConversation
	isSet bool
}

func (v NullableChatapiConversation) Get() *ChatapiConversation {
	return v.value
}

func (v *NullableChatapiConversation) Set(val *ChatapiConversation) {
	v.value = val
	v.isSet = true
}

func (v NullableChatapiConversation) IsSet() bool {
	return v.isSet
}

func (v *NullableChatapiConversation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatapiConversation(val *ChatapiConversation) *NullableChatapiConversation {
	return &NullableChatapiConversation{value: val, isSet: true}
}

func (v NullableChatapiConversation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatapiConversation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


