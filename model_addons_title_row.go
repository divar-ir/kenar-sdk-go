/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the AddonsTitleRow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddonsTitleRow{}

// AddonsTitleRow struct for AddonsTitleRow
type AddonsTitleRow struct {
	HasDivider *bool `json:"has_divider,omitempty"`
	Text *string `json:"text,omitempty"`
}

// NewAddonsTitleRow instantiates a new AddonsTitleRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonsTitleRow() *AddonsTitleRow {
	this := AddonsTitleRow{}
	return &this
}

// NewAddonsTitleRowWithDefaults instantiates a new AddonsTitleRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonsTitleRowWithDefaults() *AddonsTitleRow {
	this := AddonsTitleRow{}
	return &this
}

// GetHasDivider returns the HasDivider field value if set, zero value otherwise.
func (o *AddonsTitleRow) GetHasDivider() bool {
	if o == nil || IsNil(o.HasDivider) {
		var ret bool
		return ret
	}
	return *o.HasDivider
}

// GetHasDividerOk returns a tuple with the HasDivider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsTitleRow) GetHasDividerOk() (*bool, bool) {
	if o == nil || IsNil(o.HasDivider) {
		return nil, false
	}
	return o.HasDivider, true
}

// HasHasDivider returns a boolean if a field has been set.
func (o *AddonsTitleRow) HasHasDivider() bool {
	if o != nil && !IsNil(o.HasDivider) {
		return true
	}

	return false
}

// SetHasDivider gets a reference to the given bool and assigns it to the HasDivider field.
func (o *AddonsTitleRow) SetHasDivider(v bool) {
	o.HasDivider = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *AddonsTitleRow) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsTitleRow) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *AddonsTitleRow) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *AddonsTitleRow) SetText(v string) {
	o.Text = &v
}

func (o AddonsTitleRow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddonsTitleRow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasDivider) {
		toSerialize["has_divider"] = o.HasDivider
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	return toSerialize, nil
}

type NullableAddonsTitleRow struct {
	value *AddonsTitleRow
	isSet bool
}

func (v NullableAddonsTitleRow) Get() *AddonsTitleRow {
	return v.value
}

func (v *NullableAddonsTitleRow) Set(val *AddonsTitleRow) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonsTitleRow) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonsTitleRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonsTitleRow(val *AddonsTitleRow) *NullableAddonsTitleRow {
	return &NullableAddonsTitleRow{value: val, isSet: true}
}

func (v NullableAddonsTitleRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonsTitleRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


