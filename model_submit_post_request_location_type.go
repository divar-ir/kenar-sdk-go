/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// SubmitPostRequestLocationType the model 'SubmitPostRequestLocationType'
type SubmitPostRequestLocationType string

// List of SubmitPostRequestLocationType
const (
	SUBMITPOSTREQUESTLOCATIONTYPE_LOCATION_TYPE_EXACT SubmitPostRequestLocationType = "LOCATION_TYPE_EXACT"
	SUBMITPOSTREQUESTLOCATIONTYPE_LOCATION_TYPE_APPROXIMATE SubmitPostRequestLocationType = "LOCATION_TYPE_APPROXIMATE"
)

// All allowed values of SubmitPostRequestLocationType enum
var AllowedSubmitPostRequestLocationTypeEnumValues = []SubmitPostRequestLocationType{
	"LOCATION_TYPE_EXACT",
	"LOCATION_TYPE_APPROXIMATE",
}

func (v *SubmitPostRequestLocationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubmitPostRequestLocationType(value)
	for _, existing := range AllowedSubmitPostRequestLocationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubmitPostRequestLocationType", value)
}

// NewSubmitPostRequestLocationTypeFromValue returns a pointer to a valid SubmitPostRequestLocationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubmitPostRequestLocationTypeFromValue(v string) (*SubmitPostRequestLocationType, error) {
	ev := SubmitPostRequestLocationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubmitPostRequestLocationType: valid values are %v", v, AllowedSubmitPostRequestLocationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubmitPostRequestLocationType) IsValid() bool {
	for _, existing := range AllowedSubmitPostRequestLocationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubmitPostRequestLocationType value
func (v SubmitPostRequestLocationType) Ptr() *SubmitPostRequestLocationType {
	return &v
}

type NullableSubmitPostRequestLocationType struct {
	value *SubmitPostRequestLocationType
	isSet bool
}

func (v NullableSubmitPostRequestLocationType) Get() *SubmitPostRequestLocationType {
	return v.value
}

func (v *NullableSubmitPostRequestLocationType) Set(val *SubmitPostRequestLocationType) {
	v.value = val
	v.isSet = true
}

func (v NullableSubmitPostRequestLocationType) IsSet() bool {
	return v.isSet
}

func (v *NullableSubmitPostRequestLocationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubmitPostRequestLocationType(val *SubmitPostRequestLocationType) *NullableSubmitPostRequestLocationType {
	return &NullableSubmitPostRequestLocationType{value: val, isSet: true}
}

func (v NullableSubmitPostRequestLocationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubmitPostRequestLocationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

