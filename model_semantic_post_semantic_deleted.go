/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the SemanticPostSemanticDeleted type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SemanticPostSemanticDeleted{}

// SemanticPostSemanticDeleted struct for SemanticPostSemanticDeleted
type SemanticPostSemanticDeleted struct {
	AppSlug *string `json:"app_slug,omitempty"`
	PostToken *string `json:"post_token,omitempty"`
}

// NewSemanticPostSemanticDeleted instantiates a new SemanticPostSemanticDeleted object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSemanticPostSemanticDeleted() *SemanticPostSemanticDeleted {
	this := SemanticPostSemanticDeleted{}
	return &this
}

// NewSemanticPostSemanticDeletedWithDefaults instantiates a new SemanticPostSemanticDeleted object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSemanticPostSemanticDeletedWithDefaults() *SemanticPostSemanticDeleted {
	this := SemanticPostSemanticDeleted{}
	return &this
}

// GetAppSlug returns the AppSlug field value if set, zero value otherwise.
func (o *SemanticPostSemanticDeleted) GetAppSlug() string {
	if o == nil || IsNil(o.AppSlug) {
		var ret string
		return ret
	}
	return *o.AppSlug
}

// GetAppSlugOk returns a tuple with the AppSlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SemanticPostSemanticDeleted) GetAppSlugOk() (*string, bool) {
	if o == nil || IsNil(o.AppSlug) {
		return nil, false
	}
	return o.AppSlug, true
}

// HasAppSlug returns a boolean if a field has been set.
func (o *SemanticPostSemanticDeleted) HasAppSlug() bool {
	if o != nil && !IsNil(o.AppSlug) {
		return true
	}

	return false
}

// SetAppSlug gets a reference to the given string and assigns it to the AppSlug field.
func (o *SemanticPostSemanticDeleted) SetAppSlug(v string) {
	o.AppSlug = &v
}

// GetPostToken returns the PostToken field value if set, zero value otherwise.
func (o *SemanticPostSemanticDeleted) GetPostToken() string {
	if o == nil || IsNil(o.PostToken) {
		var ret string
		return ret
	}
	return *o.PostToken
}

// GetPostTokenOk returns a tuple with the PostToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SemanticPostSemanticDeleted) GetPostTokenOk() (*string, bool) {
	if o == nil || IsNil(o.PostToken) {
		return nil, false
	}
	return o.PostToken, true
}

// HasPostToken returns a boolean if a field has been set.
func (o *SemanticPostSemanticDeleted) HasPostToken() bool {
	if o != nil && !IsNil(o.PostToken) {
		return true
	}

	return false
}

// SetPostToken gets a reference to the given string and assigns it to the PostToken field.
func (o *SemanticPostSemanticDeleted) SetPostToken(v string) {
	o.PostToken = &v
}

func (o SemanticPostSemanticDeleted) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SemanticPostSemanticDeleted) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppSlug) {
		toSerialize["app_slug"] = o.AppSlug
	}
	if !IsNil(o.PostToken) {
		toSerialize["post_token"] = o.PostToken
	}
	return toSerialize, nil
}

type NullableSemanticPostSemanticDeleted struct {
	value *SemanticPostSemanticDeleted
	isSet bool
}

func (v NullableSemanticPostSemanticDeleted) Get() *SemanticPostSemanticDeleted {
	return v.value
}

func (v *NullableSemanticPostSemanticDeleted) Set(val *SemanticPostSemanticDeleted) {
	v.value = val
	v.isSet = true
}

func (v NullableSemanticPostSemanticDeleted) IsSet() bool {
	return v.isSet
}

func (v *NullableSemanticPostSemanticDeleted) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSemanticPostSemanticDeleted(val *SemanticPostSemanticDeleted) *NullableSemanticPostSemanticDeleted {
	return &NullableSemanticPostSemanticDeleted{value: val, isSet: true}
}

func (v NullableSemanticPostSemanticDeleted) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSemanticPostSemanticDeleted) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


