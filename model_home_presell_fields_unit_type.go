/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// HomePresellFieldsUnitType نوع واحدهای ارائه شده در پروژه
type HomePresellFieldsUnitType string

// List of HomePresellFieldsUnitType
const (
	HOMEPRESELLFIELDSUNITTYPE_UNIT_TYPE_RESIDENTIAL_APARTMENT HomePresellFieldsUnitType = "UNIT_TYPE_RESIDENTIAL_APARTMENT"
	HOMEPRESELLFIELDSUNITTYPE_UNIT_TYPE_COMMERCIAL_UNIT HomePresellFieldsUnitType = "UNIT_TYPE_COMMERCIAL_UNIT"
	HOMEPRESELLFIELDSUNITTYPE_UNIT_TYPE_OFFICE_UNIT HomePresellFieldsUnitType = "UNIT_TYPE_OFFICE_UNIT"
)

// All allowed values of HomePresellFieldsUnitType enum
var AllowedHomePresellFieldsUnitTypeEnumValues = []HomePresellFieldsUnitType{
	"UNIT_TYPE_RESIDENTIAL_APARTMENT",
	"UNIT_TYPE_COMMERCIAL_UNIT",
	"UNIT_TYPE_OFFICE_UNIT",
}

func (v *HomePresellFieldsUnitType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := HomePresellFieldsUnitType(value)
	for _, existing := range AllowedHomePresellFieldsUnitTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid HomePresellFieldsUnitType", value)
}

// NewHomePresellFieldsUnitTypeFromValue returns a pointer to a valid HomePresellFieldsUnitType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHomePresellFieldsUnitTypeFromValue(v string) (*HomePresellFieldsUnitType, error) {
	ev := HomePresellFieldsUnitType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for HomePresellFieldsUnitType: valid values are %v", v, AllowedHomePresellFieldsUnitTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v HomePresellFieldsUnitType) IsValid() bool {
	for _, existing := range AllowedHomePresellFieldsUnitTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to HomePresellFieldsUnitType value
func (v HomePresellFieldsUnitType) Ptr() *HomePresellFieldsUnitType {
	return &v
}

type NullableHomePresellFieldsUnitType struct {
	value *HomePresellFieldsUnitType
	isSet bool
}

func (v NullableHomePresellFieldsUnitType) Get() *HomePresellFieldsUnitType {
	return v.value
}

func (v *NullableHomePresellFieldsUnitType) Set(val *HomePresellFieldsUnitType) {
	v.value = val
	v.isSet = true
}

func (v NullableHomePresellFieldsUnitType) IsSet() bool {
	return v.isSet
}

func (v *NullableHomePresellFieldsUnitType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHomePresellFieldsUnitType(val *HomePresellFieldsUnitType) *NullableHomePresellFieldsUnitType {
	return &NullableHomePresellFieldsUnitType{value: val, isSet: true}
}

func (v NullableHomePresellFieldsUnitType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHomePresellFieldsUnitType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

