/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the AddonsImageCarouselRow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddonsImageCarouselRow{}

// AddonsImageCarouselRow struct for AddonsImageCarouselRow
type AddonsImageCarouselRow struct {
	HasDivider *bool `json:"has_divider,omitempty"`
	Items []ImageCarouselRowImageItem `json:"items,omitempty"`
}

// NewAddonsImageCarouselRow instantiates a new AddonsImageCarouselRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonsImageCarouselRow() *AddonsImageCarouselRow {
	this := AddonsImageCarouselRow{}
	return &this
}

// NewAddonsImageCarouselRowWithDefaults instantiates a new AddonsImageCarouselRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonsImageCarouselRowWithDefaults() *AddonsImageCarouselRow {
	this := AddonsImageCarouselRow{}
	return &this
}

// GetHasDivider returns the HasDivider field value if set, zero value otherwise.
func (o *AddonsImageCarouselRow) GetHasDivider() bool {
	if o == nil || IsNil(o.HasDivider) {
		var ret bool
		return ret
	}
	return *o.HasDivider
}

// GetHasDividerOk returns a tuple with the HasDivider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsImageCarouselRow) GetHasDividerOk() (*bool, bool) {
	if o == nil || IsNil(o.HasDivider) {
		return nil, false
	}
	return o.HasDivider, true
}

// HasHasDivider returns a boolean if a field has been set.
func (o *AddonsImageCarouselRow) HasHasDivider() bool {
	if o != nil && !IsNil(o.HasDivider) {
		return true
	}

	return false
}

// SetHasDivider gets a reference to the given bool and assigns it to the HasDivider field.
func (o *AddonsImageCarouselRow) SetHasDivider(v bool) {
	o.HasDivider = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *AddonsImageCarouselRow) GetItems() []ImageCarouselRowImageItem {
	if o == nil || IsNil(o.Items) {
		var ret []ImageCarouselRowImageItem
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsImageCarouselRow) GetItemsOk() ([]ImageCarouselRowImageItem, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *AddonsImageCarouselRow) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []ImageCarouselRowImageItem and assigns it to the Items field.
func (o *AddonsImageCarouselRow) SetItems(v []ImageCarouselRowImageItem) {
	o.Items = v
}

func (o AddonsImageCarouselRow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddonsImageCarouselRow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasDivider) {
		toSerialize["has_divider"] = o.HasDivider
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	return toSerialize, nil
}

type NullableAddonsImageCarouselRow struct {
	value *AddonsImageCarouselRow
	isSet bool
}

func (v NullableAddonsImageCarouselRow) Get() *AddonsImageCarouselRow {
	return v.value
}

func (v *NullableAddonsImageCarouselRow) Set(val *AddonsImageCarouselRow) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonsImageCarouselRow) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonsImageCarouselRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonsImageCarouselRow(val *AddonsImageCarouselRow) *NullableAddonsImageCarouselRow {
	return &NullableAddonsImageCarouselRow{value: val, isSet: true}
}

func (v NullableAddonsImageCarouselRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonsImageCarouselRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


