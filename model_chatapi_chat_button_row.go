/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the ChatapiChatButtonRow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatapiChatButtonRow{}

// ChatapiChatButtonRow struct for ChatapiChatButtonRow
type ChatapiChatButtonRow struct {
	Buttons []ChatapiChatButton `json:"buttons,omitempty"`
}

// NewChatapiChatButtonRow instantiates a new ChatapiChatButtonRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatapiChatButtonRow() *ChatapiChatButtonRow {
	this := ChatapiChatButtonRow{}
	return &this
}

// NewChatapiChatButtonRowWithDefaults instantiates a new ChatapiChatButtonRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatapiChatButtonRowWithDefaults() *ChatapiChatButtonRow {
	this := ChatapiChatButtonRow{}
	return &this
}

// GetButtons returns the Buttons field value if set, zero value otherwise.
func (o *ChatapiChatButtonRow) GetButtons() []ChatapiChatButton {
	if o == nil || IsNil(o.Buttons) {
		var ret []ChatapiChatButton
		return ret
	}
	return o.Buttons
}

// GetButtonsOk returns a tuple with the Buttons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatapiChatButtonRow) GetButtonsOk() ([]ChatapiChatButton, bool) {
	if o == nil || IsNil(o.Buttons) {
		return nil, false
	}
	return o.Buttons, true
}

// HasButtons returns a boolean if a field has been set.
func (o *ChatapiChatButtonRow) HasButtons() bool {
	if o != nil && !IsNil(o.Buttons) {
		return true
	}

	return false
}

// SetButtons gets a reference to the given []ChatapiChatButton and assigns it to the Buttons field.
func (o *ChatapiChatButtonRow) SetButtons(v []ChatapiChatButton) {
	o.Buttons = v
}

func (o ChatapiChatButtonRow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatapiChatButtonRow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Buttons) {
		toSerialize["buttons"] = o.Buttons
	}
	return toSerialize, nil
}

type NullableChatapiChatButtonRow struct {
	value *ChatapiChatButtonRow
	isSet bool
}

func (v NullableChatapiChatButtonRow) Get() *ChatapiChatButtonRow {
	return v.value
}

func (v *NullableChatapiChatButtonRow) Set(val *ChatapiChatButtonRow) {
	v.value = val
	v.isSet = true
}

func (v NullableChatapiChatButtonRow) IsSet() bool {
	return v.isSet
}

func (v *NullableChatapiChatButtonRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatapiChatButtonRow(val *ChatapiChatButtonRow) *NullableChatapiChatButtonRow {
	return &NullableChatapiChatButtonRow{value: val, isSet: true}
}

func (v NullableChatapiChatButtonRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatapiChatButtonRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


