/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// AddonsAddonSecondaryLinkagePosition the model 'AddonsAddonSecondaryLinkagePosition'
type AddonsAddonSecondaryLinkagePosition string

// List of addonsAddonSecondaryLinkagePosition
const (
	ADDONSADDONSECONDARYLINKAGEPOSITION_POST_SPEC_HEAD AddonsAddonSecondaryLinkagePosition = "POST_SPEC_HEAD"
	ADDONSADDONSECONDARYLINKAGEPOSITION_POST_SPEC_TAIL AddonsAddonSecondaryLinkagePosition = "POST_SPEC_TAIL"
	ADDONSADDONSECONDARYLINKAGEPOSITION_POST_PRICE_SPEC AddonsAddonSecondaryLinkagePosition = "POST_PRICE_SPEC"
	ADDONSADDONSECONDARYLINKAGEPOSITION_POST_DESC_TAIL AddonsAddonSecondaryLinkagePosition = "POST_DESC_TAIL"
)

// All allowed values of AddonsAddonSecondaryLinkagePosition enum
var AllowedAddonsAddonSecondaryLinkagePositionEnumValues = []AddonsAddonSecondaryLinkagePosition{
	"POST_SPEC_HEAD",
	"POST_SPEC_TAIL",
	"POST_PRICE_SPEC",
	"POST_DESC_TAIL",
}

func (v *AddonsAddonSecondaryLinkagePosition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddonsAddonSecondaryLinkagePosition(value)
	for _, existing := range AllowedAddonsAddonSecondaryLinkagePositionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddonsAddonSecondaryLinkagePosition", value)
}

// NewAddonsAddonSecondaryLinkagePositionFromValue returns a pointer to a valid AddonsAddonSecondaryLinkagePosition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddonsAddonSecondaryLinkagePositionFromValue(v string) (*AddonsAddonSecondaryLinkagePosition, error) {
	ev := AddonsAddonSecondaryLinkagePosition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddonsAddonSecondaryLinkagePosition: valid values are %v", v, AllowedAddonsAddonSecondaryLinkagePositionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddonsAddonSecondaryLinkagePosition) IsValid() bool {
	for _, existing := range AllowedAddonsAddonSecondaryLinkagePositionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to addonsAddonSecondaryLinkagePosition value
func (v AddonsAddonSecondaryLinkagePosition) Ptr() *AddonsAddonSecondaryLinkagePosition {
	return &v
}

type NullableAddonsAddonSecondaryLinkagePosition struct {
	value *AddonsAddonSecondaryLinkagePosition
	isSet bool
}

func (v NullableAddonsAddonSecondaryLinkagePosition) Get() *AddonsAddonSecondaryLinkagePosition {
	return v.value
}

func (v *NullableAddonsAddonSecondaryLinkagePosition) Set(val *AddonsAddonSecondaryLinkagePosition) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonsAddonSecondaryLinkagePosition) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonsAddonSecondaryLinkagePosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonsAddonSecondaryLinkagePosition(val *AddonsAddonSecondaryLinkagePosition) *NullableAddonsAddonSecondaryLinkagePosition {
	return &NullableAddonsAddonSecondaryLinkagePosition{value: val, isSet: true}
}

func (v NullableAddonsAddonSecondaryLinkagePosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonsAddonSecondaryLinkagePosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

