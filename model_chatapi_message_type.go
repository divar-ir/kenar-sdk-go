/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// ChatapiMessageType the model 'ChatapiMessageType'
type ChatapiMessageType string

// List of chatapiMessageType
const (
	CHATAPIMESSAGETYPE_TEXT ChatapiMessageType = "TEXT"
	CHATAPIMESSAGETYPE_IMAGE ChatapiMessageType = "IMAGE"
	CHATAPIMESSAGETYPE_FILE ChatapiMessageType = "FILE"
	CHATAPIMESSAGETYPE_VOICE ChatapiMessageType = "VOICE"
	CHATAPIMESSAGETYPE_LOCATION ChatapiMessageType = "LOCATION"
	CHATAPIMESSAGETYPE_VIDEO ChatapiMessageType = "VIDEO"
	CHATAPIMESSAGETYPE_CONTACT ChatapiMessageType = "CONTACT"
)

// All allowed values of ChatapiMessageType enum
var AllowedChatapiMessageTypeEnumValues = []ChatapiMessageType{
	"TEXT",
	"IMAGE",
	"FILE",
	"VOICE",
	"LOCATION",
	"VIDEO",
	"CONTACT",
}

func (v *ChatapiMessageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChatapiMessageType(value)
	for _, existing := range AllowedChatapiMessageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChatapiMessageType", value)
}

// NewChatapiMessageTypeFromValue returns a pointer to a valid ChatapiMessageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChatapiMessageTypeFromValue(v string) (*ChatapiMessageType, error) {
	ev := ChatapiMessageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChatapiMessageType: valid values are %v", v, AllowedChatapiMessageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChatapiMessageType) IsValid() bool {
	for _, existing := range AllowedChatapiMessageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to chatapiMessageType value
func (v ChatapiMessageType) Ptr() *ChatapiMessageType {
	return &v
}

type NullableChatapiMessageType struct {
	value *ChatapiMessageType
	isSet bool
}

func (v NullableChatapiMessageType) Get() *ChatapiMessageType {
	return v.value
}

func (v *NullableChatapiMessageType) Set(val *ChatapiMessageType) {
	v.value = val
	v.isSet = true
}

func (v NullableChatapiMessageType) IsSet() bool {
	return v.isSet
}

func (v *NullableChatapiMessageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatapiMessageType(val *ChatapiMessageType) *NullableChatapiMessageType {
	return &NullableChatapiMessageType{value: val, isSet: true}
}

func (v NullableChatapiMessageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatapiMessageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

