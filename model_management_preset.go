/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// ManagementPreset the model 'ManagementPreset'
type ManagementPreset string

// List of managementPreset
const (
	MANAGEMENTPRESET_LIGHT ManagementPreset = "LIGHT"
	MANAGEMENTPRESET_CRAFTSMEN ManagementPreset = "CRAFTSMEN"
	MANAGEMENTPRESET_MOBILE_PHONES ManagementPreset = "MOBILE_PHONES"
	MANAGEMENTPRESET_APARTMENT_SELL ManagementPreset = "APARTMENT_SELL"
	MANAGEMENTPRESET_SUITE_APARTMENT ManagementPreset = "SUITE_APARTMENT"
)

// All allowed values of ManagementPreset enum
var AllowedManagementPresetEnumValues = []ManagementPreset{
	"LIGHT",
	"CRAFTSMEN",
	"MOBILE_PHONES",
	"APARTMENT_SELL",
	"SUITE_APARTMENT",
}

func (v *ManagementPreset) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ManagementPreset(value)
	for _, existing := range AllowedManagementPresetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ManagementPreset", value)
}

// NewManagementPresetFromValue returns a pointer to a valid ManagementPreset
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewManagementPresetFromValue(v string) (*ManagementPreset, error) {
	ev := ManagementPreset(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ManagementPreset: valid values are %v", v, AllowedManagementPresetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ManagementPreset) IsValid() bool {
	for _, existing := range AllowedManagementPresetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to managementPreset value
func (v ManagementPreset) Ptr() *ManagementPreset {
	return &v
}

type NullableManagementPreset struct {
	value *ManagementPreset
	isSet bool
}

func (v NullableManagementPreset) Get() *ManagementPreset {
	return v.value
}

func (v *NullableManagementPreset) Set(val *ManagementPreset) {
	v.value = val
	v.isSet = true
}

func (v NullableManagementPreset) IsSet() bool {
	return v.isSet
}

func (v *NullableManagementPreset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagementPreset(val *ManagementPreset) *NullableManagementPreset {
	return &NullableManagementPreset{value: val, isSet: true}
}

func (v NullableManagementPreset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagementPreset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

