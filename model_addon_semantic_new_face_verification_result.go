/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// AddonSemanticNewFaceVerificationResult the model 'AddonSemanticNewFaceVerificationResult'
type AddonSemanticNewFaceVerificationResult string

// List of AddonSemanticNewFaceVerificationResult
const (
	ADDONSEMANTICNEWFACEVERIFICATIONRESULT_NEW_FACE_VERIFICATION_FAILED AddonSemanticNewFaceVerificationResult = "NEW_FACE_VERIFICATION_FAILED"
)

// All allowed values of AddonSemanticNewFaceVerificationResult enum
var AllowedAddonSemanticNewFaceVerificationResultEnumValues = []AddonSemanticNewFaceVerificationResult{
	"NEW_FACE_VERIFICATION_FAILED",
}

func (v *AddonSemanticNewFaceVerificationResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddonSemanticNewFaceVerificationResult(value)
	for _, existing := range AllowedAddonSemanticNewFaceVerificationResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddonSemanticNewFaceVerificationResult", value)
}

// NewAddonSemanticNewFaceVerificationResultFromValue returns a pointer to a valid AddonSemanticNewFaceVerificationResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddonSemanticNewFaceVerificationResultFromValue(v string) (*AddonSemanticNewFaceVerificationResult, error) {
	ev := AddonSemanticNewFaceVerificationResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddonSemanticNewFaceVerificationResult: valid values are %v", v, AllowedAddonSemanticNewFaceVerificationResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddonSemanticNewFaceVerificationResult) IsValid() bool {
	for _, existing := range AllowedAddonSemanticNewFaceVerificationResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AddonSemanticNewFaceVerificationResult value
func (v AddonSemanticNewFaceVerificationResult) Ptr() *AddonSemanticNewFaceVerificationResult {
	return &v
}

type NullableAddonSemanticNewFaceVerificationResult struct {
	value *AddonSemanticNewFaceVerificationResult
	isSet bool
}

func (v NullableAddonSemanticNewFaceVerificationResult) Get() *AddonSemanticNewFaceVerificationResult {
	return v.value
}

func (v *NullableAddonSemanticNewFaceVerificationResult) Set(val *AddonSemanticNewFaceVerificationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonSemanticNewFaceVerificationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonSemanticNewFaceVerificationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonSemanticNewFaceVerificationResult(val *AddonSemanticNewFaceVerificationResult) *NullableAddonSemanticNewFaceVerificationResult {
	return &NullableAddonSemanticNewFaceVerificationResult{value: val, isSet: true}
}

func (v NullableAddonSemanticNewFaceVerificationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonSemanticNewFaceVerificationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

