/*
divar_interface/open_platform/chatapi/chatapi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// ChatapiMessageSenderType the model 'ChatapiMessageSenderType'
type ChatapiMessageSenderType string

// List of chatapiMessageSenderType
const (
	CHATAPIMESSAGESENDERTYPE_HUMAN ChatapiMessageSenderType = "HUMAN"
	CHATAPIMESSAGESENDERTYPE_BOT ChatapiMessageSenderType = "BOT"
)

// All allowed values of ChatapiMessageSenderType enum
var AllowedChatapiMessageSenderTypeEnumValues = []ChatapiMessageSenderType{
	"HUMAN",
	"BOT",
}

func (v *ChatapiMessageSenderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChatapiMessageSenderType(value)
	for _, existing := range AllowedChatapiMessageSenderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChatapiMessageSenderType", value)
}

// NewChatapiMessageSenderTypeFromValue returns a pointer to a valid ChatapiMessageSenderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChatapiMessageSenderTypeFromValue(v string) (*ChatapiMessageSenderType, error) {
	ev := ChatapiMessageSenderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChatapiMessageSenderType: valid values are %v", v, AllowedChatapiMessageSenderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChatapiMessageSenderType) IsValid() bool {
	for _, existing := range AllowedChatapiMessageSenderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to chatapiMessageSenderType value
func (v ChatapiMessageSenderType) Ptr() *ChatapiMessageSenderType {
	return &v
}

type NullableChatapiMessageSenderType struct {
	value *ChatapiMessageSenderType
	isSet bool
}

func (v NullableChatapiMessageSenderType) Get() *ChatapiMessageSenderType {
	return v.value
}

func (v *NullableChatapiMessageSenderType) Set(val *ChatapiMessageSenderType) {
	v.value = val
	v.isSet = true
}

func (v NullableChatapiMessageSenderType) IsSet() bool {
	return v.isSet
}

func (v *NullableChatapiMessageSenderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatapiMessageSenderType(val *ChatapiMessageSenderType) *NullableChatapiMessageSenderType {
	return &NullableChatapiMessageSenderType{value: val, isSet: true}
}

func (v NullableChatapiMessageSenderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatapiMessageSenderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

