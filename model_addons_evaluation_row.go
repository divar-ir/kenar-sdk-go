/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the AddonsEvaluationRow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddonsEvaluationRow{}

// AddonsEvaluationRow struct for AddonsEvaluationRow
type AddonsEvaluationRow struct {
	IconName *DivarIconsIconName `json:"icon_name,omitempty"`
	IndicatorPercentage *int32 `json:"indicator_percentage,omitempty"`
	IndicatorText *string `json:"indicator_text,omitempty"`
	Left *AddonsEvaluationRowSection `json:"left,omitempty"`
	Middle *AddonsEvaluationRowSection `json:"middle,omitempty"`
	Right *AddonsEvaluationRowSection `json:"right,omitempty"`
}

// NewAddonsEvaluationRow instantiates a new AddonsEvaluationRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonsEvaluationRow() *AddonsEvaluationRow {
	this := AddonsEvaluationRow{}
	return &this
}

// NewAddonsEvaluationRowWithDefaults instantiates a new AddonsEvaluationRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonsEvaluationRowWithDefaults() *AddonsEvaluationRow {
	this := AddonsEvaluationRow{}
	return &this
}

// GetIconName returns the IconName field value if set, zero value otherwise.
func (o *AddonsEvaluationRow) GetIconName() DivarIconsIconName {
	if o == nil || IsNil(o.IconName) {
		var ret DivarIconsIconName
		return ret
	}
	return *o.IconName
}

// GetIconNameOk returns a tuple with the IconName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsEvaluationRow) GetIconNameOk() (*DivarIconsIconName, bool) {
	if o == nil || IsNil(o.IconName) {
		return nil, false
	}
	return o.IconName, true
}

// HasIconName returns a boolean if a field has been set.
func (o *AddonsEvaluationRow) HasIconName() bool {
	if o != nil && !IsNil(o.IconName) {
		return true
	}

	return false
}

// SetIconName gets a reference to the given DivarIconsIconName and assigns it to the IconName field.
func (o *AddonsEvaluationRow) SetIconName(v DivarIconsIconName) {
	o.IconName = &v
}

// GetIndicatorPercentage returns the IndicatorPercentage field value if set, zero value otherwise.
func (o *AddonsEvaluationRow) GetIndicatorPercentage() int32 {
	if o == nil || IsNil(o.IndicatorPercentage) {
		var ret int32
		return ret
	}
	return *o.IndicatorPercentage
}

// GetIndicatorPercentageOk returns a tuple with the IndicatorPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsEvaluationRow) GetIndicatorPercentageOk() (*int32, bool) {
	if o == nil || IsNil(o.IndicatorPercentage) {
		return nil, false
	}
	return o.IndicatorPercentage, true
}

// HasIndicatorPercentage returns a boolean if a field has been set.
func (o *AddonsEvaluationRow) HasIndicatorPercentage() bool {
	if o != nil && !IsNil(o.IndicatorPercentage) {
		return true
	}

	return false
}

// SetIndicatorPercentage gets a reference to the given int32 and assigns it to the IndicatorPercentage field.
func (o *AddonsEvaluationRow) SetIndicatorPercentage(v int32) {
	o.IndicatorPercentage = &v
}

// GetIndicatorText returns the IndicatorText field value if set, zero value otherwise.
func (o *AddonsEvaluationRow) GetIndicatorText() string {
	if o == nil || IsNil(o.IndicatorText) {
		var ret string
		return ret
	}
	return *o.IndicatorText
}

// GetIndicatorTextOk returns a tuple with the IndicatorText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsEvaluationRow) GetIndicatorTextOk() (*string, bool) {
	if o == nil || IsNil(o.IndicatorText) {
		return nil, false
	}
	return o.IndicatorText, true
}

// HasIndicatorText returns a boolean if a field has been set.
func (o *AddonsEvaluationRow) HasIndicatorText() bool {
	if o != nil && !IsNil(o.IndicatorText) {
		return true
	}

	return false
}

// SetIndicatorText gets a reference to the given string and assigns it to the IndicatorText field.
func (o *AddonsEvaluationRow) SetIndicatorText(v string) {
	o.IndicatorText = &v
}

// GetLeft returns the Left field value if set, zero value otherwise.
func (o *AddonsEvaluationRow) GetLeft() AddonsEvaluationRowSection {
	if o == nil || IsNil(o.Left) {
		var ret AddonsEvaluationRowSection
		return ret
	}
	return *o.Left
}

// GetLeftOk returns a tuple with the Left field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsEvaluationRow) GetLeftOk() (*AddonsEvaluationRowSection, bool) {
	if o == nil || IsNil(o.Left) {
		return nil, false
	}
	return o.Left, true
}

// HasLeft returns a boolean if a field has been set.
func (o *AddonsEvaluationRow) HasLeft() bool {
	if o != nil && !IsNil(o.Left) {
		return true
	}

	return false
}

// SetLeft gets a reference to the given AddonsEvaluationRowSection and assigns it to the Left field.
func (o *AddonsEvaluationRow) SetLeft(v AddonsEvaluationRowSection) {
	o.Left = &v
}

// GetMiddle returns the Middle field value if set, zero value otherwise.
func (o *AddonsEvaluationRow) GetMiddle() AddonsEvaluationRowSection {
	if o == nil || IsNil(o.Middle) {
		var ret AddonsEvaluationRowSection
		return ret
	}
	return *o.Middle
}

// GetMiddleOk returns a tuple with the Middle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsEvaluationRow) GetMiddleOk() (*AddonsEvaluationRowSection, bool) {
	if o == nil || IsNil(o.Middle) {
		return nil, false
	}
	return o.Middle, true
}

// HasMiddle returns a boolean if a field has been set.
func (o *AddonsEvaluationRow) HasMiddle() bool {
	if o != nil && !IsNil(o.Middle) {
		return true
	}

	return false
}

// SetMiddle gets a reference to the given AddonsEvaluationRowSection and assigns it to the Middle field.
func (o *AddonsEvaluationRow) SetMiddle(v AddonsEvaluationRowSection) {
	o.Middle = &v
}

// GetRight returns the Right field value if set, zero value otherwise.
func (o *AddonsEvaluationRow) GetRight() AddonsEvaluationRowSection {
	if o == nil || IsNil(o.Right) {
		var ret AddonsEvaluationRowSection
		return ret
	}
	return *o.Right
}

// GetRightOk returns a tuple with the Right field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsEvaluationRow) GetRightOk() (*AddonsEvaluationRowSection, bool) {
	if o == nil || IsNil(o.Right) {
		return nil, false
	}
	return o.Right, true
}

// HasRight returns a boolean if a field has been set.
func (o *AddonsEvaluationRow) HasRight() bool {
	if o != nil && !IsNil(o.Right) {
		return true
	}

	return false
}

// SetRight gets a reference to the given AddonsEvaluationRowSection and assigns it to the Right field.
func (o *AddonsEvaluationRow) SetRight(v AddonsEvaluationRowSection) {
	o.Right = &v
}

func (o AddonsEvaluationRow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddonsEvaluationRow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IconName) {
		toSerialize["icon_name"] = o.IconName
	}
	if !IsNil(o.IndicatorPercentage) {
		toSerialize["indicator_percentage"] = o.IndicatorPercentage
	}
	if !IsNil(o.IndicatorText) {
		toSerialize["indicator_text"] = o.IndicatorText
	}
	if !IsNil(o.Left) {
		toSerialize["left"] = o.Left
	}
	if !IsNil(o.Middle) {
		toSerialize["middle"] = o.Middle
	}
	if !IsNil(o.Right) {
		toSerialize["right"] = o.Right
	}
	return toSerialize, nil
}

type NullableAddonsEvaluationRow struct {
	value *AddonsEvaluationRow
	isSet bool
}

func (v NullableAddonsEvaluationRow) Get() *AddonsEvaluationRow {
	return v.value
}

func (v *NullableAddonsEvaluationRow) Set(val *AddonsEvaluationRow) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonsEvaluationRow) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonsEvaluationRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonsEvaluationRow(val *AddonsEvaluationRow) *NullableAddonsEvaluationRow {
	return &NullableAddonsEvaluationRow{value: val, isSet: true}
}

func (v NullableAddonsEvaluationRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonsEvaluationRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


