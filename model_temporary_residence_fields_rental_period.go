/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// TemporaryResidenceFieldsRentalPeriod Rental period type (daily, weekly, monthly)
type TemporaryResidenceFieldsRentalPeriod string

// List of TemporaryResidenceFieldsRentalPeriod
const (
	TEMPORARYRESIDENCEFIELDSRENTALPERIOD_RENTAL_PERIOD_DAILY TemporaryResidenceFieldsRentalPeriod = "RENTAL_PERIOD_DAILY"
	TEMPORARYRESIDENCEFIELDSRENTALPERIOD_RENTAL_PERIOD_WEEKLY TemporaryResidenceFieldsRentalPeriod = "RENTAL_PERIOD_WEEKLY"
	TEMPORARYRESIDENCEFIELDSRENTALPERIOD_RENTAL_PERIOD_MONTHLY TemporaryResidenceFieldsRentalPeriod = "RENTAL_PERIOD_MONTHLY"
)

// All allowed values of TemporaryResidenceFieldsRentalPeriod enum
var AllowedTemporaryResidenceFieldsRentalPeriodEnumValues = []TemporaryResidenceFieldsRentalPeriod{
	"RENTAL_PERIOD_DAILY",
	"RENTAL_PERIOD_WEEKLY",
	"RENTAL_PERIOD_MONTHLY",
}

func (v *TemporaryResidenceFieldsRentalPeriod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TemporaryResidenceFieldsRentalPeriod(value)
	for _, existing := range AllowedTemporaryResidenceFieldsRentalPeriodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TemporaryResidenceFieldsRentalPeriod", value)
}

// NewTemporaryResidenceFieldsRentalPeriodFromValue returns a pointer to a valid TemporaryResidenceFieldsRentalPeriod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTemporaryResidenceFieldsRentalPeriodFromValue(v string) (*TemporaryResidenceFieldsRentalPeriod, error) {
	ev := TemporaryResidenceFieldsRentalPeriod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TemporaryResidenceFieldsRentalPeriod: valid values are %v", v, AllowedTemporaryResidenceFieldsRentalPeriodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TemporaryResidenceFieldsRentalPeriod) IsValid() bool {
	for _, existing := range AllowedTemporaryResidenceFieldsRentalPeriodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TemporaryResidenceFieldsRentalPeriod value
func (v TemporaryResidenceFieldsRentalPeriod) Ptr() *TemporaryResidenceFieldsRentalPeriod {
	return &v
}

type NullableTemporaryResidenceFieldsRentalPeriod struct {
	value *TemporaryResidenceFieldsRentalPeriod
	isSet bool
}

func (v NullableTemporaryResidenceFieldsRentalPeriod) Get() *TemporaryResidenceFieldsRentalPeriod {
	return v.value
}

func (v *NullableTemporaryResidenceFieldsRentalPeriod) Set(val *TemporaryResidenceFieldsRentalPeriod) {
	v.value = val
	v.isSet = true
}

func (v NullableTemporaryResidenceFieldsRentalPeriod) IsSet() bool {
	return v.isSet
}

func (v *NullableTemporaryResidenceFieldsRentalPeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemporaryResidenceFieldsRentalPeriod(val *TemporaryResidenceFieldsRentalPeriod) *NullableTemporaryResidenceFieldsRentalPeriod {
	return &NullableTemporaryResidenceFieldsRentalPeriod{value: val, isSet: true}
}

func (v NullableTemporaryResidenceFieldsRentalPeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemporaryResidenceFieldsRentalPeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

