/*
divar_interface/open_platform/chatapi/chatapi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// PaymentTransactionType the model 'PaymentTransactionType'
type PaymentTransactionType string

// List of paymentTransactionType
const (
	PAYMENTTRANSACTIONTYPE_TRANSACTION_TYPE_REORDER PaymentTransactionType = "TRANSACTION_TYPE_REORDER"
)

// All allowed values of PaymentTransactionType enum
var AllowedPaymentTransactionTypeEnumValues = []PaymentTransactionType{
	"TRANSACTION_TYPE_REORDER",
}

func (v *PaymentTransactionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentTransactionType(value)
	for _, existing := range AllowedPaymentTransactionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentTransactionType", value)
}

// NewPaymentTransactionTypeFromValue returns a pointer to a valid PaymentTransactionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentTransactionTypeFromValue(v string) (*PaymentTransactionType, error) {
	ev := PaymentTransactionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentTransactionType: valid values are %v", v, AllowedPaymentTransactionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentTransactionType) IsValid() bool {
	for _, existing := range AllowedPaymentTransactionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to paymentTransactionType value
func (v PaymentTransactionType) Ptr() *PaymentTransactionType {
	return &v
}

type NullablePaymentTransactionType struct {
	value *PaymentTransactionType
	isSet bool
}

func (v NullablePaymentTransactionType) Get() *PaymentTransactionType {
	return v.value
}

func (v *NullablePaymentTransactionType) Set(val *PaymentTransactionType) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentTransactionType) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentTransactionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentTransactionType(val *PaymentTransactionType) *NullablePaymentTransactionType {
	return &NullablePaymentTransactionType{value: val, isSet: true}
}

func (v NullablePaymentTransactionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentTransactionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

