/*
divar_interface/open_platform/chatapi/chatapi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// AddonsAddonLinkage the model 'AddonsAddonLinkage'
type AddonsAddonLinkage string

// List of addonsAddonLinkage
const (
	ADDONSADDONLINKAGE_POST_DETAILS AddonsAddonLinkage = "POST_DETAILS"
	ADDONSADDONLINKAGE_POST_MANAGEMENT AddonsAddonLinkage = "POST_MANAGEMENT"
)

// All allowed values of AddonsAddonLinkage enum
var AllowedAddonsAddonLinkageEnumValues = []AddonsAddonLinkage{
	"POST_DETAILS",
	"POST_MANAGEMENT",
}

func (v *AddonsAddonLinkage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddonsAddonLinkage(value)
	for _, existing := range AllowedAddonsAddonLinkageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddonsAddonLinkage", value)
}

// NewAddonsAddonLinkageFromValue returns a pointer to a valid AddonsAddonLinkage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddonsAddonLinkageFromValue(v string) (*AddonsAddonLinkage, error) {
	ev := AddonsAddonLinkage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddonsAddonLinkage: valid values are %v", v, AllowedAddonsAddonLinkageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddonsAddonLinkage) IsValid() bool {
	for _, existing := range AllowedAddonsAddonLinkageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to addonsAddonLinkage value
func (v AddonsAddonLinkage) Ptr() *AddonsAddonLinkage {
	return &v
}

type NullableAddonsAddonLinkage struct {
	value *AddonsAddonLinkage
	isSet bool
}

func (v NullableAddonsAddonLinkage) Get() *AddonsAddonLinkage {
	return v.value
}

func (v *NullableAddonsAddonLinkage) Set(val *AddonsAddonLinkage) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonsAddonLinkage) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonsAddonLinkage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonsAddonLinkage(val *AddonsAddonLinkage) *NullableAddonsAddonLinkage {
	return &NullableAddonsAddonLinkage{value: val, isSet: true}
}

func (v NullableAddonsAddonLinkage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonsAddonLinkage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

