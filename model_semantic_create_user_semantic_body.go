/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the SemanticCreateUserSemanticBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SemanticCreateUserSemanticBody{}

// SemanticCreateUserSemanticBody struct for SemanticCreateUserSemanticBody
type SemanticCreateUserSemanticBody struct {
	Phone *string `json:"phone,omitempty"`
	Semantic *map[string]string `json:"semantic,omitempty"`
	TicketUuid *string `json:"ticket_uuid,omitempty"`
	Cost *int32 `json:"cost,omitempty"`
}

// NewSemanticCreateUserSemanticBody instantiates a new SemanticCreateUserSemanticBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSemanticCreateUserSemanticBody() *SemanticCreateUserSemanticBody {
	this := SemanticCreateUserSemanticBody{}
	return &this
}

// NewSemanticCreateUserSemanticBodyWithDefaults instantiates a new SemanticCreateUserSemanticBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSemanticCreateUserSemanticBodyWithDefaults() *SemanticCreateUserSemanticBody {
	this := SemanticCreateUserSemanticBody{}
	return &this
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *SemanticCreateUserSemanticBody) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SemanticCreateUserSemanticBody) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *SemanticCreateUserSemanticBody) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *SemanticCreateUserSemanticBody) SetPhone(v string) {
	o.Phone = &v
}

// GetSemantic returns the Semantic field value if set, zero value otherwise.
func (o *SemanticCreateUserSemanticBody) GetSemantic() map[string]string {
	if o == nil || IsNil(o.Semantic) {
		var ret map[string]string
		return ret
	}
	return *o.Semantic
}

// GetSemanticOk returns a tuple with the Semantic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SemanticCreateUserSemanticBody) GetSemanticOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Semantic) {
		return nil, false
	}
	return o.Semantic, true
}

// HasSemantic returns a boolean if a field has been set.
func (o *SemanticCreateUserSemanticBody) HasSemantic() bool {
	if o != nil && !IsNil(o.Semantic) {
		return true
	}

	return false
}

// SetSemantic gets a reference to the given map[string]string and assigns it to the Semantic field.
func (o *SemanticCreateUserSemanticBody) SetSemantic(v map[string]string) {
	o.Semantic = &v
}

// GetTicketUuid returns the TicketUuid field value if set, zero value otherwise.
func (o *SemanticCreateUserSemanticBody) GetTicketUuid() string {
	if o == nil || IsNil(o.TicketUuid) {
		var ret string
		return ret
	}
	return *o.TicketUuid
}

// GetTicketUuidOk returns a tuple with the TicketUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SemanticCreateUserSemanticBody) GetTicketUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TicketUuid) {
		return nil, false
	}
	return o.TicketUuid, true
}

// HasTicketUuid returns a boolean if a field has been set.
func (o *SemanticCreateUserSemanticBody) HasTicketUuid() bool {
	if o != nil && !IsNil(o.TicketUuid) {
		return true
	}

	return false
}

// SetTicketUuid gets a reference to the given string and assigns it to the TicketUuid field.
func (o *SemanticCreateUserSemanticBody) SetTicketUuid(v string) {
	o.TicketUuid = &v
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *SemanticCreateUserSemanticBody) GetCost() int32 {
	if o == nil || IsNil(o.Cost) {
		var ret int32
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SemanticCreateUserSemanticBody) GetCostOk() (*int32, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *SemanticCreateUserSemanticBody) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given int32 and assigns it to the Cost field.
func (o *SemanticCreateUserSemanticBody) SetCost(v int32) {
	o.Cost = &v
}

func (o SemanticCreateUserSemanticBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SemanticCreateUserSemanticBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.Semantic) {
		toSerialize["semantic"] = o.Semantic
	}
	if !IsNil(o.TicketUuid) {
		toSerialize["ticket_uuid"] = o.TicketUuid
	}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	return toSerialize, nil
}

type NullableSemanticCreateUserSemanticBody struct {
	value *SemanticCreateUserSemanticBody
	isSet bool
}

func (v NullableSemanticCreateUserSemanticBody) Get() *SemanticCreateUserSemanticBody {
	return v.value
}

func (v *NullableSemanticCreateUserSemanticBody) Set(val *SemanticCreateUserSemanticBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSemanticCreateUserSemanticBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSemanticCreateUserSemanticBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSemanticCreateUserSemanticBody(val *SemanticCreateUserSemanticBody) *NullableSemanticCreateUserSemanticBody {
	return &NullableSemanticCreateUserSemanticBody{value: val, isSet: true}
}

func (v NullableSemanticCreateUserSemanticBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSemanticCreateUserSemanticBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


