/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the AddonsAddonSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddonsAddonSelector{}

// AddonsAddonSelector struct for AddonsAddonSelector
type AddonsAddonSelector struct {
	Tokens []string `json:"tokens,omitempty"`
	Categories []string `json:"categories,omitempty"`
	Cities []string `json:"cities,omitempty"`
	Districts []string `json:"districts,omitempty"`
	BrandModels []string `json:"brand_models,omitempty"`
}

// NewAddonsAddonSelector instantiates a new AddonsAddonSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonsAddonSelector() *AddonsAddonSelector {
	this := AddonsAddonSelector{}
	return &this
}

// NewAddonsAddonSelectorWithDefaults instantiates a new AddonsAddonSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonsAddonSelectorWithDefaults() *AddonsAddonSelector {
	this := AddonsAddonSelector{}
	return &this
}

// GetTokens returns the Tokens field value if set, zero value otherwise.
func (o *AddonsAddonSelector) GetTokens() []string {
	if o == nil || IsNil(o.Tokens) {
		var ret []string
		return ret
	}
	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsAddonSelector) GetTokensOk() ([]string, bool) {
	if o == nil || IsNil(o.Tokens) {
		return nil, false
	}
	return o.Tokens, true
}

// HasTokens returns a boolean if a field has been set.
func (o *AddonsAddonSelector) HasTokens() bool {
	if o != nil && !IsNil(o.Tokens) {
		return true
	}

	return false
}

// SetTokens gets a reference to the given []string and assigns it to the Tokens field.
func (o *AddonsAddonSelector) SetTokens(v []string) {
	o.Tokens = v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *AddonsAddonSelector) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsAddonSelector) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *AddonsAddonSelector) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *AddonsAddonSelector) SetCategories(v []string) {
	o.Categories = v
}

// GetCities returns the Cities field value if set, zero value otherwise.
func (o *AddonsAddonSelector) GetCities() []string {
	if o == nil || IsNil(o.Cities) {
		var ret []string
		return ret
	}
	return o.Cities
}

// GetCitiesOk returns a tuple with the Cities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsAddonSelector) GetCitiesOk() ([]string, bool) {
	if o == nil || IsNil(o.Cities) {
		return nil, false
	}
	return o.Cities, true
}

// HasCities returns a boolean if a field has been set.
func (o *AddonsAddonSelector) HasCities() bool {
	if o != nil && !IsNil(o.Cities) {
		return true
	}

	return false
}

// SetCities gets a reference to the given []string and assigns it to the Cities field.
func (o *AddonsAddonSelector) SetCities(v []string) {
	o.Cities = v
}

// GetDistricts returns the Districts field value if set, zero value otherwise.
func (o *AddonsAddonSelector) GetDistricts() []string {
	if o == nil || IsNil(o.Districts) {
		var ret []string
		return ret
	}
	return o.Districts
}

// GetDistrictsOk returns a tuple with the Districts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsAddonSelector) GetDistrictsOk() ([]string, bool) {
	if o == nil || IsNil(o.Districts) {
		return nil, false
	}
	return o.Districts, true
}

// HasDistricts returns a boolean if a field has been set.
func (o *AddonsAddonSelector) HasDistricts() bool {
	if o != nil && !IsNil(o.Districts) {
		return true
	}

	return false
}

// SetDistricts gets a reference to the given []string and assigns it to the Districts field.
func (o *AddonsAddonSelector) SetDistricts(v []string) {
	o.Districts = v
}

// GetBrandModels returns the BrandModels field value if set, zero value otherwise.
func (o *AddonsAddonSelector) GetBrandModels() []string {
	if o == nil || IsNil(o.BrandModels) {
		var ret []string
		return ret
	}
	return o.BrandModels
}

// GetBrandModelsOk returns a tuple with the BrandModels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsAddonSelector) GetBrandModelsOk() ([]string, bool) {
	if o == nil || IsNil(o.BrandModels) {
		return nil, false
	}
	return o.BrandModels, true
}

// HasBrandModels returns a boolean if a field has been set.
func (o *AddonsAddonSelector) HasBrandModels() bool {
	if o != nil && !IsNil(o.BrandModels) {
		return true
	}

	return false
}

// SetBrandModels gets a reference to the given []string and assigns it to the BrandModels field.
func (o *AddonsAddonSelector) SetBrandModels(v []string) {
	o.BrandModels = v
}

func (o AddonsAddonSelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddonsAddonSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tokens) {
		toSerialize["tokens"] = o.Tokens
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.Cities) {
		toSerialize["cities"] = o.Cities
	}
	if !IsNil(o.Districts) {
		toSerialize["districts"] = o.Districts
	}
	if !IsNil(o.BrandModels) {
		toSerialize["brand_models"] = o.BrandModels
	}
	return toSerialize, nil
}

type NullableAddonsAddonSelector struct {
	value *AddonsAddonSelector
	isSet bool
}

func (v NullableAddonsAddonSelector) Get() *AddonsAddonSelector {
	return v.value
}

func (v *NullableAddonsAddonSelector) Set(val *AddonsAddonSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonsAddonSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonsAddonSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonsAddonSelector(val *AddonsAddonSelector) *NullableAddonsAddonSelector {
	return &NullableAddonsAddonSelector{value: val, isSet: true}
}

func (v NullableAddonsAddonSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonsAddonSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


