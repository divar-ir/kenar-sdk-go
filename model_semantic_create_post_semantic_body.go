/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the SemanticCreatePostSemanticBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SemanticCreatePostSemanticBody{}

// SemanticCreatePostSemanticBody struct for SemanticCreatePostSemanticBody
type SemanticCreatePostSemanticBody struct {
	Cost *int32 `json:"cost,omitempty"`
	Semantic *map[string]string `json:"semantic,omitempty"`
	TicketUuid *string `json:"ticket_uuid,omitempty"`
}

// NewSemanticCreatePostSemanticBody instantiates a new SemanticCreatePostSemanticBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSemanticCreatePostSemanticBody() *SemanticCreatePostSemanticBody {
	this := SemanticCreatePostSemanticBody{}
	return &this
}

// NewSemanticCreatePostSemanticBodyWithDefaults instantiates a new SemanticCreatePostSemanticBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSemanticCreatePostSemanticBodyWithDefaults() *SemanticCreatePostSemanticBody {
	this := SemanticCreatePostSemanticBody{}
	return &this
}

// GetCost returns the Cost field value if set, zero value otherwise.
func (o *SemanticCreatePostSemanticBody) GetCost() int32 {
	if o == nil || IsNil(o.Cost) {
		var ret int32
		return ret
	}
	return *o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SemanticCreatePostSemanticBody) GetCostOk() (*int32, bool) {
	if o == nil || IsNil(o.Cost) {
		return nil, false
	}
	return o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *SemanticCreatePostSemanticBody) HasCost() bool {
	if o != nil && !IsNil(o.Cost) {
		return true
	}

	return false
}

// SetCost gets a reference to the given int32 and assigns it to the Cost field.
func (o *SemanticCreatePostSemanticBody) SetCost(v int32) {
	o.Cost = &v
}

// GetSemantic returns the Semantic field value if set, zero value otherwise.
func (o *SemanticCreatePostSemanticBody) GetSemantic() map[string]string {
	if o == nil || IsNil(o.Semantic) {
		var ret map[string]string
		return ret
	}
	return *o.Semantic
}

// GetSemanticOk returns a tuple with the Semantic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SemanticCreatePostSemanticBody) GetSemanticOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Semantic) {
		return nil, false
	}
	return o.Semantic, true
}

// HasSemantic returns a boolean if a field has been set.
func (o *SemanticCreatePostSemanticBody) HasSemantic() bool {
	if o != nil && !IsNil(o.Semantic) {
		return true
	}

	return false
}

// SetSemantic gets a reference to the given map[string]string and assigns it to the Semantic field.
func (o *SemanticCreatePostSemanticBody) SetSemantic(v map[string]string) {
	o.Semantic = &v
}

// GetTicketUuid returns the TicketUuid field value if set, zero value otherwise.
func (o *SemanticCreatePostSemanticBody) GetTicketUuid() string {
	if o == nil || IsNil(o.TicketUuid) {
		var ret string
		return ret
	}
	return *o.TicketUuid
}

// GetTicketUuidOk returns a tuple with the TicketUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SemanticCreatePostSemanticBody) GetTicketUuidOk() (*string, bool) {
	if o == nil || IsNil(o.TicketUuid) {
		return nil, false
	}
	return o.TicketUuid, true
}

// HasTicketUuid returns a boolean if a field has been set.
func (o *SemanticCreatePostSemanticBody) HasTicketUuid() bool {
	if o != nil && !IsNil(o.TicketUuid) {
		return true
	}

	return false
}

// SetTicketUuid gets a reference to the given string and assigns it to the TicketUuid field.
func (o *SemanticCreatePostSemanticBody) SetTicketUuid(v string) {
	o.TicketUuid = &v
}

func (o SemanticCreatePostSemanticBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SemanticCreatePostSemanticBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cost) {
		toSerialize["cost"] = o.Cost
	}
	if !IsNil(o.Semantic) {
		toSerialize["semantic"] = o.Semantic
	}
	if !IsNil(o.TicketUuid) {
		toSerialize["ticket_uuid"] = o.TicketUuid
	}
	return toSerialize, nil
}

type NullableSemanticCreatePostSemanticBody struct {
	value *SemanticCreatePostSemanticBody
	isSet bool
}

func (v NullableSemanticCreatePostSemanticBody) Get() *SemanticCreatePostSemanticBody {
	return v.value
}

func (v *NullableSemanticCreatePostSemanticBody) Set(val *SemanticCreatePostSemanticBody) {
	v.value = val
	v.isSet = true
}

func (v NullableSemanticCreatePostSemanticBody) IsSet() bool {
	return v.isSet
}

func (v *NullableSemanticCreatePostSemanticBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSemanticCreatePostSemanticBody(val *SemanticCreatePostSemanticBody) *NullableSemanticCreatePostSemanticBody {
	return &NullableSemanticCreatePostSemanticBody{value: val, isSet: true}
}

func (v NullableSemanticCreatePostSemanticBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSemanticCreatePostSemanticBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


