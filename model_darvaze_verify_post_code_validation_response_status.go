/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// DarvazeVerifyPostCodeValidationResponseStatus the model 'DarvazeVerifyPostCodeValidationResponseStatus'
type DarvazeVerifyPostCodeValidationResponseStatus string

// List of darvazeVerifyPostCodeValidationResponseStatus
const (
	DARVAZEVERIFYPOSTCODEVALIDATIONRESPONSESTATUS_PENDING DarvazeVerifyPostCodeValidationResponseStatus = "PENDING"
	DARVAZEVERIFYPOSTCODEVALIDATIONRESPONSESTATUS_VERIFIED DarvazeVerifyPostCodeValidationResponseStatus = "VERIFIED"
	DARVAZEVERIFYPOSTCODEVALIDATIONRESPONSESTATUS_REJECTED DarvazeVerifyPostCodeValidationResponseStatus = "REJECTED"
)

// All allowed values of DarvazeVerifyPostCodeValidationResponseStatus enum
var AllowedDarvazeVerifyPostCodeValidationResponseStatusEnumValues = []DarvazeVerifyPostCodeValidationResponseStatus{
	"PENDING",
	"VERIFIED",
	"REJECTED",
}

func (v *DarvazeVerifyPostCodeValidationResponseStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DarvazeVerifyPostCodeValidationResponseStatus(value)
	for _, existing := range AllowedDarvazeVerifyPostCodeValidationResponseStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DarvazeVerifyPostCodeValidationResponseStatus", value)
}

// NewDarvazeVerifyPostCodeValidationResponseStatusFromValue returns a pointer to a valid DarvazeVerifyPostCodeValidationResponseStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDarvazeVerifyPostCodeValidationResponseStatusFromValue(v string) (*DarvazeVerifyPostCodeValidationResponseStatus, error) {
	ev := DarvazeVerifyPostCodeValidationResponseStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DarvazeVerifyPostCodeValidationResponseStatus: valid values are %v", v, AllowedDarvazeVerifyPostCodeValidationResponseStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DarvazeVerifyPostCodeValidationResponseStatus) IsValid() bool {
	for _, existing := range AllowedDarvazeVerifyPostCodeValidationResponseStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to darvazeVerifyPostCodeValidationResponseStatus value
func (v DarvazeVerifyPostCodeValidationResponseStatus) Ptr() *DarvazeVerifyPostCodeValidationResponseStatus {
	return &v
}

type NullableDarvazeVerifyPostCodeValidationResponseStatus struct {
	value *DarvazeVerifyPostCodeValidationResponseStatus
	isSet bool
}

func (v NullableDarvazeVerifyPostCodeValidationResponseStatus) Get() *DarvazeVerifyPostCodeValidationResponseStatus {
	return v.value
}

func (v *NullableDarvazeVerifyPostCodeValidationResponseStatus) Set(val *DarvazeVerifyPostCodeValidationResponseStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableDarvazeVerifyPostCodeValidationResponseStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableDarvazeVerifyPostCodeValidationResponseStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDarvazeVerifyPostCodeValidationResponseStatus(val *DarvazeVerifyPostCodeValidationResponseStatus) *NullableDarvazeVerifyPostCodeValidationResponseStatus {
	return &NullableDarvazeVerifyPostCodeValidationResponseStatus{value: val, isSet: true}
}

func (v NullableDarvazeVerifyPostCodeValidationResponseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDarvazeVerifyPostCodeValidationResponseStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

