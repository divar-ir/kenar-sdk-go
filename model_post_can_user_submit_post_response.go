/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the PostCanUserSubmitPostResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostCanUserSubmitPostResponse{}

// PostCanUserSubmitPostResponse struct for PostCanUserSubmitPostResponse
type PostCanUserSubmitPostResponse struct {
	CanSubmit *bool `json:"can_submit,omitempty"`
}

// NewPostCanUserSubmitPostResponse instantiates a new PostCanUserSubmitPostResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostCanUserSubmitPostResponse() *PostCanUserSubmitPostResponse {
	this := PostCanUserSubmitPostResponse{}
	return &this
}

// NewPostCanUserSubmitPostResponseWithDefaults instantiates a new PostCanUserSubmitPostResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostCanUserSubmitPostResponseWithDefaults() *PostCanUserSubmitPostResponse {
	this := PostCanUserSubmitPostResponse{}
	return &this
}

// GetCanSubmit returns the CanSubmit field value if set, zero value otherwise.
func (o *PostCanUserSubmitPostResponse) GetCanSubmit() bool {
	if o == nil || IsNil(o.CanSubmit) {
		var ret bool
		return ret
	}
	return *o.CanSubmit
}

// GetCanSubmitOk returns a tuple with the CanSubmit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostCanUserSubmitPostResponse) GetCanSubmitOk() (*bool, bool) {
	if o == nil || IsNil(o.CanSubmit) {
		return nil, false
	}
	return o.CanSubmit, true
}

// HasCanSubmit returns a boolean if a field has been set.
func (o *PostCanUserSubmitPostResponse) HasCanSubmit() bool {
	if o != nil && !IsNil(o.CanSubmit) {
		return true
	}

	return false
}

// SetCanSubmit gets a reference to the given bool and assigns it to the CanSubmit field.
func (o *PostCanUserSubmitPostResponse) SetCanSubmit(v bool) {
	o.CanSubmit = &v
}

func (o PostCanUserSubmitPostResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostCanUserSubmitPostResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CanSubmit) {
		toSerialize["can_submit"] = o.CanSubmit
	}
	return toSerialize, nil
}

type NullablePostCanUserSubmitPostResponse struct {
	value *PostCanUserSubmitPostResponse
	isSet bool
}

func (v NullablePostCanUserSubmitPostResponse) Get() *PostCanUserSubmitPostResponse {
	return v.value
}

func (v *NullablePostCanUserSubmitPostResponse) Set(val *PostCanUserSubmitPostResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePostCanUserSubmitPostResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePostCanUserSubmitPostResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostCanUserSubmitPostResponse(val *PostCanUserSubmitPostResponse) *NullablePostCanUserSubmitPostResponse {
	return &NullablePostCanUserSubmitPostResponse{value: val, isSet: true}
}

func (v NullablePostCanUserSubmitPostResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostCanUserSubmitPostResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


