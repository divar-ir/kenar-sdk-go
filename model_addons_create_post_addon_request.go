/*
divar_interface/open_platform/chatapi/chatapi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the AddonsCreatePostAddonRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddonsCreatePostAddonRequest{}

// AddonsCreatePostAddonRequest struct for AddonsCreatePostAddonRequest
type AddonsCreatePostAddonRequest struct {
	Token *string `json:"token,omitempty"`
	Widgets map[string]interface{} `json:"widgets,omitempty"`
	Selector *AddonsAddonSelector `json:"selector,omitempty"`
	LinkInSpec *string `json:"link_in_spec,omitempty"`
	Notes *string `json:"notes,omitempty"`
	Semantic *map[string]string `json:"semantic,omitempty"`
	SemanticSensitives []string `json:"semantic_sensitives,omitempty"`
}

// NewAddonsCreatePostAddonRequest instantiates a new AddonsCreatePostAddonRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonsCreatePostAddonRequest() *AddonsCreatePostAddonRequest {
	this := AddonsCreatePostAddonRequest{}
	return &this
}

// NewAddonsCreatePostAddonRequestWithDefaults instantiates a new AddonsCreatePostAddonRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonsCreatePostAddonRequestWithDefaults() *AddonsCreatePostAddonRequest {
	this := AddonsCreatePostAddonRequest{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *AddonsCreatePostAddonRequest) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsCreatePostAddonRequest) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *AddonsCreatePostAddonRequest) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *AddonsCreatePostAddonRequest) SetToken(v string) {
	o.Token = &v
}

// GetWidgets returns the Widgets field value if set, zero value otherwise.
func (o *AddonsCreatePostAddonRequest) GetWidgets() map[string]interface{} {
	if o == nil || IsNil(o.Widgets) {
		var ret map[string]interface{}
		return ret
	}
	return o.Widgets
}

// GetWidgetsOk returns a tuple with the Widgets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsCreatePostAddonRequest) GetWidgetsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Widgets) {
		return map[string]interface{}{}, false
	}
	return o.Widgets, true
}

// HasWidgets returns a boolean if a field has been set.
func (o *AddonsCreatePostAddonRequest) HasWidgets() bool {
	if o != nil && !IsNil(o.Widgets) {
		return true
	}

	return false
}

// SetWidgets gets a reference to the given map[string]interface{} and assigns it to the Widgets field.
func (o *AddonsCreatePostAddonRequest) SetWidgets(v map[string]interface{}) {
	o.Widgets = v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *AddonsCreatePostAddonRequest) GetSelector() AddonsAddonSelector {
	if o == nil || IsNil(o.Selector) {
		var ret AddonsAddonSelector
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsCreatePostAddonRequest) GetSelectorOk() (*AddonsAddonSelector, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *AddonsCreatePostAddonRequest) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given AddonsAddonSelector and assigns it to the Selector field.
func (o *AddonsCreatePostAddonRequest) SetSelector(v AddonsAddonSelector) {
	o.Selector = &v
}

// GetLinkInSpec returns the LinkInSpec field value if set, zero value otherwise.
func (o *AddonsCreatePostAddonRequest) GetLinkInSpec() string {
	if o == nil || IsNil(o.LinkInSpec) {
		var ret string
		return ret
	}
	return *o.LinkInSpec
}

// GetLinkInSpecOk returns a tuple with the LinkInSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsCreatePostAddonRequest) GetLinkInSpecOk() (*string, bool) {
	if o == nil || IsNil(o.LinkInSpec) {
		return nil, false
	}
	return o.LinkInSpec, true
}

// HasLinkInSpec returns a boolean if a field has been set.
func (o *AddonsCreatePostAddonRequest) HasLinkInSpec() bool {
	if o != nil && !IsNil(o.LinkInSpec) {
		return true
	}

	return false
}

// SetLinkInSpec gets a reference to the given string and assigns it to the LinkInSpec field.
func (o *AddonsCreatePostAddonRequest) SetLinkInSpec(v string) {
	o.LinkInSpec = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *AddonsCreatePostAddonRequest) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsCreatePostAddonRequest) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *AddonsCreatePostAddonRequest) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *AddonsCreatePostAddonRequest) SetNotes(v string) {
	o.Notes = &v
}

// GetSemantic returns the Semantic field value if set, zero value otherwise.
func (o *AddonsCreatePostAddonRequest) GetSemantic() map[string]string {
	if o == nil || IsNil(o.Semantic) {
		var ret map[string]string
		return ret
	}
	return *o.Semantic
}

// GetSemanticOk returns a tuple with the Semantic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsCreatePostAddonRequest) GetSemanticOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Semantic) {
		return nil, false
	}
	return o.Semantic, true
}

// HasSemantic returns a boolean if a field has been set.
func (o *AddonsCreatePostAddonRequest) HasSemantic() bool {
	if o != nil && !IsNil(o.Semantic) {
		return true
	}

	return false
}

// SetSemantic gets a reference to the given map[string]string and assigns it to the Semantic field.
func (o *AddonsCreatePostAddonRequest) SetSemantic(v map[string]string) {
	o.Semantic = &v
}

// GetSemanticSensitives returns the SemanticSensitives field value if set, zero value otherwise.
func (o *AddonsCreatePostAddonRequest) GetSemanticSensitives() []string {
	if o == nil || IsNil(o.SemanticSensitives) {
		var ret []string
		return ret
	}
	return o.SemanticSensitives
}

// GetSemanticSensitivesOk returns a tuple with the SemanticSensitives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsCreatePostAddonRequest) GetSemanticSensitivesOk() ([]string, bool) {
	if o == nil || IsNil(o.SemanticSensitives) {
		return nil, false
	}
	return o.SemanticSensitives, true
}

// HasSemanticSensitives returns a boolean if a field has been set.
func (o *AddonsCreatePostAddonRequest) HasSemanticSensitives() bool {
	if o != nil && !IsNil(o.SemanticSensitives) {
		return true
	}

	return false
}

// SetSemanticSensitives gets a reference to the given []string and assigns it to the SemanticSensitives field.
func (o *AddonsCreatePostAddonRequest) SetSemanticSensitives(v []string) {
	o.SemanticSensitives = v
}

func (o AddonsCreatePostAddonRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddonsCreatePostAddonRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.Widgets) {
		toSerialize["widgets"] = o.Widgets
	}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !IsNil(o.LinkInSpec) {
		toSerialize["link_in_spec"] = o.LinkInSpec
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.Semantic) {
		toSerialize["semantic"] = o.Semantic
	}
	if !IsNil(o.SemanticSensitives) {
		toSerialize["semantic_sensitives"] = o.SemanticSensitives
	}
	return toSerialize, nil
}

type NullableAddonsCreatePostAddonRequest struct {
	value *AddonsCreatePostAddonRequest
	isSet bool
}

func (v NullableAddonsCreatePostAddonRequest) Get() *AddonsCreatePostAddonRequest {
	return v.value
}

func (v *NullableAddonsCreatePostAddonRequest) Set(val *AddonsCreatePostAddonRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonsCreatePostAddonRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonsCreatePostAddonRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonsCreatePostAddonRequest(val *AddonsCreatePostAddonRequest) *NullableAddonsCreatePostAddonRequest {
	return &NullableAddonsCreatePostAddonRequest{value: val, isSet: true}
}

func (v NullableAddonsCreatePostAddonRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonsCreatePostAddonRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


