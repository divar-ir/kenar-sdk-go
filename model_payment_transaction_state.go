/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// PaymentTransactionState the model 'PaymentTransactionState'
type PaymentTransactionState string

// List of paymentTransactionState
const (
	PAYMENTTRANSACTIONSTATE_TRANSACTION_STATE_PENDING PaymentTransactionState = "TRANSACTION_STATE_PENDING"
	PAYMENTTRANSACTIONSTATE_TRANSACTION_STATE_COMPLETED PaymentTransactionState = "TRANSACTION_STATE_COMPLETED"
	PAYMENTTRANSACTIONSTATE_TRANSACTION_STATE_FAILED PaymentTransactionState = "TRANSACTION_STATE_FAILED"
	PAYMENTTRANSACTIONSTATE_TRANSACTION_STATE_REFUNDED PaymentTransactionState = "TRANSACTION_STATE_REFUNDED"
)

// All allowed values of PaymentTransactionState enum
var AllowedPaymentTransactionStateEnumValues = []PaymentTransactionState{
	"TRANSACTION_STATE_PENDING",
	"TRANSACTION_STATE_COMPLETED",
	"TRANSACTION_STATE_FAILED",
	"TRANSACTION_STATE_REFUNDED",
}

func (v *PaymentTransactionState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentTransactionState(value)
	for _, existing := range AllowedPaymentTransactionStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentTransactionState", value)
}

// NewPaymentTransactionStateFromValue returns a pointer to a valid PaymentTransactionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentTransactionStateFromValue(v string) (*PaymentTransactionState, error) {
	ev := PaymentTransactionState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentTransactionState: valid values are %v", v, AllowedPaymentTransactionStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentTransactionState) IsValid() bool {
	for _, existing := range AllowedPaymentTransactionStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to paymentTransactionState value
func (v PaymentTransactionState) Ptr() *PaymentTransactionState {
	return &v
}

type NullablePaymentTransactionState struct {
	value *PaymentTransactionState
	isSet bool
}

func (v NullablePaymentTransactionState) Get() *PaymentTransactionState {
	return v.value
}

func (v *NullablePaymentTransactionState) Set(val *PaymentTransactionState) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentTransactionState) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentTransactionState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentTransactionState(val *PaymentTransactionState) *NullablePaymentTransactionState {
	return &NullablePaymentTransactionState{value: val, isSet: true}
}

func (v NullablePaymentTransactionState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentTransactionState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

