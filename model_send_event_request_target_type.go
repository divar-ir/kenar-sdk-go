/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// SendEventRequestTargetType the model 'SendEventRequestTargetType'
type SendEventRequestTargetType string

// List of SendEventRequestTargetType
const (
	SENDEVENTREQUESTTARGETTYPE_USER SendEventRequestTargetType = "USER"
	SENDEVENTREQUESTTARGETTYPE_POST SendEventRequestTargetType = "POST"
)

// All allowed values of SendEventRequestTargetType enum
var AllowedSendEventRequestTargetTypeEnumValues = []SendEventRequestTargetType{
	"USER",
	"POST",
}

func (v *SendEventRequestTargetType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SendEventRequestTargetType(value)
	for _, existing := range AllowedSendEventRequestTargetTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SendEventRequestTargetType", value)
}

// NewSendEventRequestTargetTypeFromValue returns a pointer to a valid SendEventRequestTargetType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSendEventRequestTargetTypeFromValue(v string) (*SendEventRequestTargetType, error) {
	ev := SendEventRequestTargetType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SendEventRequestTargetType: valid values are %v", v, AllowedSendEventRequestTargetTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SendEventRequestTargetType) IsValid() bool {
	for _, existing := range AllowedSendEventRequestTargetTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SendEventRequestTargetType value
func (v SendEventRequestTargetType) Ptr() *SendEventRequestTargetType {
	return &v
}

type NullableSendEventRequestTargetType struct {
	value *SendEventRequestTargetType
	isSet bool
}

func (v NullableSendEventRequestTargetType) Get() *SendEventRequestTargetType {
	return v.value
}

func (v *NullableSendEventRequestTargetType) Set(val *SendEventRequestTargetType) {
	v.value = val
	v.isSet = true
}

func (v NullableSendEventRequestTargetType) IsSet() bool {
	return v.isSet
}

func (v *NullableSendEventRequestTargetType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendEventRequestTargetType(val *SendEventRequestTargetType) *NullableSendEventRequestTargetType {
	return &NullableSendEventRequestTargetType{value: val, isSet: true}
}

func (v NullableSendEventRequestTargetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendEventRequestTargetType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

