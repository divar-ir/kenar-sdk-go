/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the PostSubmitEmergencyResidencePostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostSubmitEmergencyResidencePostRequest{}

// PostSubmitEmergencyResidencePostRequest struct for PostSubmitEmergencyResidencePostRequest
type PostSubmitEmergencyResidencePostRequest struct {
	City *string `json:"city,omitempty"`
	Data map[string]interface{} `json:"data,omitempty"`
	Description *string `json:"description,omitempty"`
	District *string `json:"district,omitempty"`
	Images []string `json:"images,omitempty"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	Title *string `json:"title,omitempty"`
}

// NewPostSubmitEmergencyResidencePostRequest instantiates a new PostSubmitEmergencyResidencePostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostSubmitEmergencyResidencePostRequest() *PostSubmitEmergencyResidencePostRequest {
	this := PostSubmitEmergencyResidencePostRequest{}
	return &this
}

// NewPostSubmitEmergencyResidencePostRequestWithDefaults instantiates a new PostSubmitEmergencyResidencePostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostSubmitEmergencyResidencePostRequestWithDefaults() *PostSubmitEmergencyResidencePostRequest {
	this := PostSubmitEmergencyResidencePostRequest{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *PostSubmitEmergencyResidencePostRequest) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostSubmitEmergencyResidencePostRequest) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *PostSubmitEmergencyResidencePostRequest) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *PostSubmitEmergencyResidencePostRequest) SetCity(v string) {
	o.City = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PostSubmitEmergencyResidencePostRequest) GetData() map[string]interface{} {
	if o == nil || IsNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostSubmitEmergencyResidencePostRequest) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PostSubmitEmergencyResidencePostRequest) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *PostSubmitEmergencyResidencePostRequest) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PostSubmitEmergencyResidencePostRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostSubmitEmergencyResidencePostRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PostSubmitEmergencyResidencePostRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PostSubmitEmergencyResidencePostRequest) SetDescription(v string) {
	o.Description = &v
}

// GetDistrict returns the District field value if set, zero value otherwise.
func (o *PostSubmitEmergencyResidencePostRequest) GetDistrict() string {
	if o == nil || IsNil(o.District) {
		var ret string
		return ret
	}
	return *o.District
}

// GetDistrictOk returns a tuple with the District field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostSubmitEmergencyResidencePostRequest) GetDistrictOk() (*string, bool) {
	if o == nil || IsNil(o.District) {
		return nil, false
	}
	return o.District, true
}

// HasDistrict returns a boolean if a field has been set.
func (o *PostSubmitEmergencyResidencePostRequest) HasDistrict() bool {
	if o != nil && !IsNil(o.District) {
		return true
	}

	return false
}

// SetDistrict gets a reference to the given string and assigns it to the District field.
func (o *PostSubmitEmergencyResidencePostRequest) SetDistrict(v string) {
	o.District = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *PostSubmitEmergencyResidencePostRequest) GetImages() []string {
	if o == nil || IsNil(o.Images) {
		var ret []string
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostSubmitEmergencyResidencePostRequest) GetImagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *PostSubmitEmergencyResidencePostRequest) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []string and assigns it to the Images field.
func (o *PostSubmitEmergencyResidencePostRequest) SetImages(v []string) {
	o.Images = v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *PostSubmitEmergencyResidencePostRequest) GetPhoneNumber() string {
	if o == nil || IsNil(o.PhoneNumber) {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostSubmitEmergencyResidencePostRequest) GetPhoneNumberOk() (*string, bool) {
	if o == nil || IsNil(o.PhoneNumber) {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *PostSubmitEmergencyResidencePostRequest) HasPhoneNumber() bool {
	if o != nil && !IsNil(o.PhoneNumber) {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *PostSubmitEmergencyResidencePostRequest) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *PostSubmitEmergencyResidencePostRequest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostSubmitEmergencyResidencePostRequest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *PostSubmitEmergencyResidencePostRequest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *PostSubmitEmergencyResidencePostRequest) SetTitle(v string) {
	o.Title = &v
}

func (o PostSubmitEmergencyResidencePostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostSubmitEmergencyResidencePostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.District) {
		toSerialize["district"] = o.District
	}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !IsNil(o.PhoneNumber) {
		toSerialize["phone_number"] = o.PhoneNumber
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullablePostSubmitEmergencyResidencePostRequest struct {
	value *PostSubmitEmergencyResidencePostRequest
	isSet bool
}

func (v NullablePostSubmitEmergencyResidencePostRequest) Get() *PostSubmitEmergencyResidencePostRequest {
	return v.value
}

func (v *NullablePostSubmitEmergencyResidencePostRequest) Set(val *PostSubmitEmergencyResidencePostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePostSubmitEmergencyResidencePostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePostSubmitEmergencyResidencePostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostSubmitEmergencyResidencePostRequest(val *PostSubmitEmergencyResidencePostRequest) *NullablePostSubmitEmergencyResidencePostRequest {
	return &NullablePostSubmitEmergencyResidencePostRequest{value: val, isSet: true}
}

func (v NullablePostSubmitEmergencyResidencePostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostSubmitEmergencyResidencePostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


