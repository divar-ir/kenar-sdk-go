/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// PaymentWalletTransactionStatus Represents the various states a wallet transaction can be in during its lifecycle. UNKNOWN: Default/uninitialized status - should not be used in normal operation. CREATED: Transaction has been created and is awaiting payment or further processing. EXPIRED: Transaction was created but expired before completion (e.g., payment timeout). PAID: Transaction has been paid/funded and is still pending final confirmation. COMMITTED: Transaction has been successfully committed and finalized in the system.
type PaymentWalletTransactionStatus string

// List of paymentWalletTransactionStatus
const (
	PAYMENTWALLETTRANSACTIONSTATUS_CREATED PaymentWalletTransactionStatus = "CREATED"
	PAYMENTWALLETTRANSACTIONSTATUS_EXPIRED PaymentWalletTransactionStatus = "EXPIRED"
	PAYMENTWALLETTRANSACTIONSTATUS_PAID PaymentWalletTransactionStatus = "PAID"
	PAYMENTWALLETTRANSACTIONSTATUS_COMMITTED PaymentWalletTransactionStatus = "COMMITTED"
)

// All allowed values of PaymentWalletTransactionStatus enum
var AllowedPaymentWalletTransactionStatusEnumValues = []PaymentWalletTransactionStatus{
	"CREATED",
	"EXPIRED",
	"PAID",
	"COMMITTED",
}

func (v *PaymentWalletTransactionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PaymentWalletTransactionStatus(value)
	for _, existing := range AllowedPaymentWalletTransactionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PaymentWalletTransactionStatus", value)
}

// NewPaymentWalletTransactionStatusFromValue returns a pointer to a valid PaymentWalletTransactionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPaymentWalletTransactionStatusFromValue(v string) (*PaymentWalletTransactionStatus, error) {
	ev := PaymentWalletTransactionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PaymentWalletTransactionStatus: valid values are %v", v, AllowedPaymentWalletTransactionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PaymentWalletTransactionStatus) IsValid() bool {
	for _, existing := range AllowedPaymentWalletTransactionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to paymentWalletTransactionStatus value
func (v PaymentWalletTransactionStatus) Ptr() *PaymentWalletTransactionStatus {
	return &v
}

type NullablePaymentWalletTransactionStatus struct {
	value *PaymentWalletTransactionStatus
	isSet bool
}

func (v NullablePaymentWalletTransactionStatus) Get() *PaymentWalletTransactionStatus {
	return v.value
}

func (v *NullablePaymentWalletTransactionStatus) Set(val *PaymentWalletTransactionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePaymentWalletTransactionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePaymentWalletTransactionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaymentWalletTransactionStatus(val *PaymentWalletTransactionStatus) *NullablePaymentWalletTransactionStatus {
	return &NullablePaymentWalletTransactionStatus{value: val, isSet: true}
}

func (v NullablePaymentWalletTransactionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaymentWalletTransactionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

