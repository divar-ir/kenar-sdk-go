/*
Kenar API

Testing SemanticAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package kenarapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID/kenarapi"
)

func Test_kenarapi_SemanticAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SemanticAPIService SemanticCreatePostSemantic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var token string

		resp, httpRes, err := apiClient.SemanticAPI.SemanticCreatePostSemantic(context.Background(), token).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SemanticAPIService SemanticCreateUserSemantic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var phone string

		resp, httpRes, err := apiClient.SemanticAPI.SemanticCreateUserSemantic(context.Background(), phone).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SemanticAPIService SemanticCreateUserSemantic2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var divarUserId string

		resp, httpRes, err := apiClient.SemanticAPI.SemanticCreateUserSemantic2(context.Background(), divarUserId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SemanticAPIService SemanticDeleteUserSemantic", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var phone string

		resp, httpRes, err := apiClient.SemanticAPI.SemanticDeleteUserSemantic(context.Background(), phone).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SemanticAPIService SemanticDeleteUserSemantic2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var divarUserId string

		resp, httpRes, err := apiClient.SemanticAPI.SemanticDeleteUserSemantic2(context.Background(), divarUserId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
