/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// AssetsGetPermissionsResponseLifeCycleState the model 'AssetsGetPermissionsResponseLifeCycleState'
type AssetsGetPermissionsResponseLifeCycleState string

// List of assetsGetPermissionsResponseLifeCycleState
const (
	ASSETSGETPERMISSIONSRESPONSELIFECYCLESTATE_EXPERIMENTAL AssetsGetPermissionsResponseLifeCycleState = "EXPERIMENTAL"
	ASSETSGETPERMISSIONSRESPONSELIFECYCLESTATE_ACTIVE AssetsGetPermissionsResponseLifeCycleState = "ACTIVE"
	ASSETSGETPERMISSIONSRESPONSELIFECYCLESTATE_DEPRECATING_SOON AssetsGetPermissionsResponseLifeCycleState = "DEPRECATING_SOON"
	ASSETSGETPERMISSIONSRESPONSELIFECYCLESTATE_DEPRECATED AssetsGetPermissionsResponseLifeCycleState = "DEPRECATED"
)

// All allowed values of AssetsGetPermissionsResponseLifeCycleState enum
var AllowedAssetsGetPermissionsResponseLifeCycleStateEnumValues = []AssetsGetPermissionsResponseLifeCycleState{
	"EXPERIMENTAL",
	"ACTIVE",
	"DEPRECATING_SOON",
	"DEPRECATED",
}

func (v *AssetsGetPermissionsResponseLifeCycleState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AssetsGetPermissionsResponseLifeCycleState(value)
	for _, existing := range AllowedAssetsGetPermissionsResponseLifeCycleStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AssetsGetPermissionsResponseLifeCycleState", value)
}

// NewAssetsGetPermissionsResponseLifeCycleStateFromValue returns a pointer to a valid AssetsGetPermissionsResponseLifeCycleState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAssetsGetPermissionsResponseLifeCycleStateFromValue(v string) (*AssetsGetPermissionsResponseLifeCycleState, error) {
	ev := AssetsGetPermissionsResponseLifeCycleState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AssetsGetPermissionsResponseLifeCycleState: valid values are %v", v, AllowedAssetsGetPermissionsResponseLifeCycleStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AssetsGetPermissionsResponseLifeCycleState) IsValid() bool {
	for _, existing := range AllowedAssetsGetPermissionsResponseLifeCycleStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to assetsGetPermissionsResponseLifeCycleState value
func (v AssetsGetPermissionsResponseLifeCycleState) Ptr() *AssetsGetPermissionsResponseLifeCycleState {
	return &v
}

type NullableAssetsGetPermissionsResponseLifeCycleState struct {
	value *AssetsGetPermissionsResponseLifeCycleState
	isSet bool
}

func (v NullableAssetsGetPermissionsResponseLifeCycleState) Get() *AssetsGetPermissionsResponseLifeCycleState {
	return v.value
}

func (v *NullableAssetsGetPermissionsResponseLifeCycleState) Set(val *AssetsGetPermissionsResponseLifeCycleState) {
	v.value = val
	v.isSet = true
}

func (v NullableAssetsGetPermissionsResponseLifeCycleState) IsSet() bool {
	return v.isSet
}

func (v *NullableAssetsGetPermissionsResponseLifeCycleState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssetsGetPermissionsResponseLifeCycleState(val *AssetsGetPermissionsResponseLifeCycleState) *NullableAssetsGetPermissionsResponseLifeCycleState {
	return &NullableAssetsGetPermissionsResponseLifeCycleState{value: val, isSet: true}
}

func (v NullableAssetsGetPermissionsResponseLifeCycleState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssetsGetPermissionsResponseLifeCycleState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

