/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// ChatapiMessageSenderSide the model 'ChatapiMessageSenderSide'
type ChatapiMessageSenderSide string

// List of chatapiMessageSenderSide
const (
	CHATAPIMESSAGESENDERSIDE_BUYER ChatapiMessageSenderSide = "BUYER"
	CHATAPIMESSAGESENDERSIDE_SELLER ChatapiMessageSenderSide = "SELLER"
)

// All allowed values of ChatapiMessageSenderSide enum
var AllowedChatapiMessageSenderSideEnumValues = []ChatapiMessageSenderSide{
	"BUYER",
	"SELLER",
}

func (v *ChatapiMessageSenderSide) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChatapiMessageSenderSide(value)
	for _, existing := range AllowedChatapiMessageSenderSideEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChatapiMessageSenderSide", value)
}

// NewChatapiMessageSenderSideFromValue returns a pointer to a valid ChatapiMessageSenderSide
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChatapiMessageSenderSideFromValue(v string) (*ChatapiMessageSenderSide, error) {
	ev := ChatapiMessageSenderSide(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChatapiMessageSenderSide: valid values are %v", v, AllowedChatapiMessageSenderSideEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChatapiMessageSenderSide) IsValid() bool {
	for _, existing := range AllowedChatapiMessageSenderSideEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to chatapiMessageSenderSide value
func (v ChatapiMessageSenderSide) Ptr() *ChatapiMessageSenderSide {
	return &v
}

type NullableChatapiMessageSenderSide struct {
	value *ChatapiMessageSenderSide
	isSet bool
}

func (v NullableChatapiMessageSenderSide) Get() *ChatapiMessageSenderSide {
	return v.value
}

func (v *NullableChatapiMessageSenderSide) Set(val *ChatapiMessageSenderSide) {
	v.value = val
	v.isSet = true
}

func (v NullableChatapiMessageSenderSide) IsSet() bool {
	return v.isSet
}

func (v *NullableChatapiMessageSenderSide) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatapiMessageSenderSide(val *ChatapiMessageSenderSide) *NullableChatapiMessageSenderSide {
	return &NullableChatapiMessageSenderSide{value: val, isSet: true}
}

func (v NullableChatapiMessageSenderSide) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatapiMessageSenderSide) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

