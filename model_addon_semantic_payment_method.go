/*
divar_interface/open_platform/chatapi/chatapi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// AddonSemanticPaymentMethod the model 'AddonSemanticPaymentMethod'
type AddonSemanticPaymentMethod string

// List of AddonSemanticPaymentMethod
const (
	ADDONSEMANTICPAYMENTMETHOD_SECURE AddonSemanticPaymentMethod = "SECURE"
)

// All allowed values of AddonSemanticPaymentMethod enum
var AllowedAddonSemanticPaymentMethodEnumValues = []AddonSemanticPaymentMethod{
	"SECURE",
}

func (v *AddonSemanticPaymentMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddonSemanticPaymentMethod(value)
	for _, existing := range AllowedAddonSemanticPaymentMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddonSemanticPaymentMethod", value)
}

// NewAddonSemanticPaymentMethodFromValue returns a pointer to a valid AddonSemanticPaymentMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddonSemanticPaymentMethodFromValue(v string) (*AddonSemanticPaymentMethod, error) {
	ev := AddonSemanticPaymentMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddonSemanticPaymentMethod: valid values are %v", v, AllowedAddonSemanticPaymentMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddonSemanticPaymentMethod) IsValid() bool {
	for _, existing := range AllowedAddonSemanticPaymentMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AddonSemanticPaymentMethod value
func (v AddonSemanticPaymentMethod) Ptr() *AddonSemanticPaymentMethod {
	return &v
}

type NullableAddonSemanticPaymentMethod struct {
	value *AddonSemanticPaymentMethod
	isSet bool
}

func (v NullableAddonSemanticPaymentMethod) Get() *AddonSemanticPaymentMethod {
	return v.value
}

func (v *NullableAddonSemanticPaymentMethod) Set(val *AddonSemanticPaymentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonSemanticPaymentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonSemanticPaymentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonSemanticPaymentMethod(val *AddonSemanticPaymentMethod) *NullableAddonSemanticPaymentMethod {
	return &NullableAddonSemanticPaymentMethod{value: val, isSet: true}
}

func (v NullableAddonSemanticPaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonSemanticPaymentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

