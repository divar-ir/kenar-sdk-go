/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// AddonSemanticIdentityVerificationStage the model 'AddonSemanticIdentityVerificationStage'
type AddonSemanticIdentityVerificationStage string

// List of AddonSemanticIdentityVerificationStage
const (
	ADDONSEMANTICIDENTITYVERIFICATIONSTAGE_IDENTITYVERIFICATIONSTAGE_NOT_STARTED AddonSemanticIdentityVerificationStage = "IDENTITYVERIFICATIONSTAGE_NOT_STARTED"
	ADDONSEMANTICIDENTITYVERIFICATIONSTAGE_NATIONAL_INFO_VERIFICATION AddonSemanticIdentityVerificationStage = "NATIONAL_INFO_VERIFICATION"
	ADDONSEMANTICIDENTITYVERIFICATIONSTAGE_IMAGE_VERIFICATION AddonSemanticIdentityVerificationStage = "IMAGE_VERIFICATION"
	ADDONSEMANTICIDENTITYVERIFICATIONSTAGE_VIDEO_VERIFICATION AddonSemanticIdentityVerificationStage = "VIDEO_VERIFICATION"
)

// All allowed values of AddonSemanticIdentityVerificationStage enum
var AllowedAddonSemanticIdentityVerificationStageEnumValues = []AddonSemanticIdentityVerificationStage{
	"IDENTITYVERIFICATIONSTAGE_NOT_STARTED",
	"NATIONAL_INFO_VERIFICATION",
	"IMAGE_VERIFICATION",
	"VIDEO_VERIFICATION",
}

func (v *AddonSemanticIdentityVerificationStage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddonSemanticIdentityVerificationStage(value)
	for _, existing := range AllowedAddonSemanticIdentityVerificationStageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddonSemanticIdentityVerificationStage", value)
}

// NewAddonSemanticIdentityVerificationStageFromValue returns a pointer to a valid AddonSemanticIdentityVerificationStage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddonSemanticIdentityVerificationStageFromValue(v string) (*AddonSemanticIdentityVerificationStage, error) {
	ev := AddonSemanticIdentityVerificationStage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddonSemanticIdentityVerificationStage: valid values are %v", v, AllowedAddonSemanticIdentityVerificationStageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddonSemanticIdentityVerificationStage) IsValid() bool {
	for _, existing := range AllowedAddonSemanticIdentityVerificationStageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AddonSemanticIdentityVerificationStage value
func (v AddonSemanticIdentityVerificationStage) Ptr() *AddonSemanticIdentityVerificationStage {
	return &v
}

type NullableAddonSemanticIdentityVerificationStage struct {
	value *AddonSemanticIdentityVerificationStage
	isSet bool
}

func (v NullableAddonSemanticIdentityVerificationStage) Get() *AddonSemanticIdentityVerificationStage {
	return v.value
}

func (v *NullableAddonSemanticIdentityVerificationStage) Set(val *AddonSemanticIdentityVerificationStage) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonSemanticIdentityVerificationStage) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonSemanticIdentityVerificationStage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonSemanticIdentityVerificationStage(val *AddonSemanticIdentityVerificationStage) *NullableAddonSemanticIdentityVerificationStage {
	return &NullableAddonSemanticIdentityVerificationStage{value: val, isSet: true}
}

func (v NullableAddonSemanticIdentityVerificationStage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonSemanticIdentityVerificationStage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

