/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// TemporaryResidenceFieldsPetsAllowed Pet policy for the residence
type TemporaryResidenceFieldsPetsAllowed string

// List of TemporaryResidenceFieldsPetsAllowed
const (
	TEMPORARYRESIDENCEFIELDSPETSALLOWED_PETS_ALLOWED_YES TemporaryResidenceFieldsPetsAllowed = "PETS_ALLOWED_YES"
	TEMPORARYRESIDENCEFIELDSPETSALLOWED_PETS_ALLOWED_NO TemporaryResidenceFieldsPetsAllowed = "PETS_ALLOWED_NO"
	TEMPORARYRESIDENCEFIELDSPETSALLOWED_PETS_ALLOWED_WITH_AGREEMENT TemporaryResidenceFieldsPetsAllowed = "PETS_ALLOWED_WITH_AGREEMENT"
)

// All allowed values of TemporaryResidenceFieldsPetsAllowed enum
var AllowedTemporaryResidenceFieldsPetsAllowedEnumValues = []TemporaryResidenceFieldsPetsAllowed{
	"PETS_ALLOWED_YES",
	"PETS_ALLOWED_NO",
	"PETS_ALLOWED_WITH_AGREEMENT",
}

func (v *TemporaryResidenceFieldsPetsAllowed) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TemporaryResidenceFieldsPetsAllowed(value)
	for _, existing := range AllowedTemporaryResidenceFieldsPetsAllowedEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TemporaryResidenceFieldsPetsAllowed", value)
}

// NewTemporaryResidenceFieldsPetsAllowedFromValue returns a pointer to a valid TemporaryResidenceFieldsPetsAllowed
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTemporaryResidenceFieldsPetsAllowedFromValue(v string) (*TemporaryResidenceFieldsPetsAllowed, error) {
	ev := TemporaryResidenceFieldsPetsAllowed(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TemporaryResidenceFieldsPetsAllowed: valid values are %v", v, AllowedTemporaryResidenceFieldsPetsAllowedEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TemporaryResidenceFieldsPetsAllowed) IsValid() bool {
	for _, existing := range AllowedTemporaryResidenceFieldsPetsAllowedEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TemporaryResidenceFieldsPetsAllowed value
func (v TemporaryResidenceFieldsPetsAllowed) Ptr() *TemporaryResidenceFieldsPetsAllowed {
	return &v
}

type NullableTemporaryResidenceFieldsPetsAllowed struct {
	value *TemporaryResidenceFieldsPetsAllowed
	isSet bool
}

func (v NullableTemporaryResidenceFieldsPetsAllowed) Get() *TemporaryResidenceFieldsPetsAllowed {
	return v.value
}

func (v *NullableTemporaryResidenceFieldsPetsAllowed) Set(val *TemporaryResidenceFieldsPetsAllowed) {
	v.value = val
	v.isSet = true
}

func (v NullableTemporaryResidenceFieldsPetsAllowed) IsSet() bool {
	return v.isSet
}

func (v *NullableTemporaryResidenceFieldsPetsAllowed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemporaryResidenceFieldsPetsAllowed(val *TemporaryResidenceFieldsPetsAllowed) *NullableTemporaryResidenceFieldsPetsAllowed {
	return &NullableTemporaryResidenceFieldsPetsAllowed{value: val, isSet: true}
}

func (v NullableTemporaryResidenceFieldsPetsAllowed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemporaryResidenceFieldsPetsAllowed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

