/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the ProtobufAny type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProtobufAny{}

// ProtobufAny `Any` شامل یک پیام protocol buffer سریالایز شده دلخواه همراه با URL که نوع پیام سریالایز شده را توضیح می‌دهد.  کتابخانه Protobuf پشتیبانی برای pack/unpack مقادیر Any را به شکل توابع کاربردی یا متدهای اضافی تولید شده نوع Any ارائه می‌دهد.  مثال 1: Pack و unpack پیام در C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  مثال 2: Pack و unpack پیام در Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }  مثال 3: Pack و unpack پیام در Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...  مثال 4: Pack و unpack پیام در Go       foo := &pb.Foo{...}      any, err := anypb.New(foo)      if err != nil {        ...      }      ...      foo := &pb.Foo{}      if err := any.UnmarshalTo(foo); err != nil {        ...      }  متدهای pack ارائه شده توسط کتابخانه protobuf به طور پیش‌فرض از 'type.googleapis.com/full.type.name' به عنوان URL نوع استفاده می‌کنند و متدهای unpack فقط از نام نوع کاملاً واجد شرایط پس از آخرین '/' در URL نوع استفاده می‌کنند، مثلاً \"foo.bar.com/x/y.z\" نام نوع \"y.z\" را ایجاد می‌کند.   JSON  نمایش JSON یک مقدار `Any` از نمایش معمولی پیام deserialize شده و جاسازی شده، با یک فیلد اضافی `@type` که شامل URL نوع است، استفاده می‌کند. مثال:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  اگر نوع پیام جاسازی شده شناخته شده باشد و نمایش JSON سفارشی داشته باشد، آن نمایش با افزودن فیلد `value` که JSON سفارشی را علاوه بر فیلد `@type` نگه می‌دارد، جاسازی می‌شود. مثال (برای پیام [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
type ProtobufAny struct {
	// یک URL/نام منبع که نوع پیام protocol buffer سریالایز شده را به طور منحصر به فرد شناسایی می‌کند. این رشته باید حداقل یک کاراکتر \"/\" داشته باشد. آخرین بخش مسیر URL باید نام کاملاً واجد شرایط نوع را نمایش دهد (مانند `path/google.protobuf.Duration`). نام باید در فرم کانونیکال باشد (مثلاً، \".\" ابتدایی پذیرفته نیست).  در عمل، تیم‌ها معمولاً تمام انواعی که انتظار دارند در زمینه Any استفاده شود را به صورت پیش‌کامپایل در باینری قرار می‌دهند. با این حال، برای URL هایی که از طرح `http`، `https` یا بدون طرح استفاده می‌کنند، می‌توان به طور اختیاری یک سرور نوع تنظیم کرد که URL های نوع را به تعاریف پیام نگاشت می‌کند:  * اگر طرحی ارائه نشود، `https` فرض می‌شود. * یک HTTP GET روی URL باید مقدار [google.protobuf.Type][] را   به فرمت باینری ارائه دهد، یا خطا تولید کند. * برنامه‌ها مجاز هستند نتایج جستجو را بر اساس   URL کش کنند، یا آنها را در باینری پیش‌کامپایل کنند تا از هر   جستجویی جلوگیری کنند. بنابراین، سازگاری باینری باید در   تغییرات انواع حفظ شود. (از نام‌های نوع نسخه‌دار برای مدیریت   تغییرات شکست‌آور استفاده کنید.)  توجه: این قابلیت در حال حاضر در نسخه رسمی protobuf در دسترس نیست، و برای URL های نوع که با type.googleapis.com شروع می‌شوند استفاده نمی‌شود.  طرح‌های غیر از `http`، `https` (یا طرح خالی) ممکن است با معناشناسی خاص پیاده‌سازی استفاده شوند.
	Type *string `json:"@type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProtobufAny ProtobufAny

// NewProtobufAny instantiates a new ProtobufAny object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtobufAny() *ProtobufAny {
	this := ProtobufAny{}
	return &this
}

// NewProtobufAnyWithDefaults instantiates a new ProtobufAny object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtobufAnyWithDefaults() *ProtobufAny {
	this := ProtobufAny{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProtobufAny) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtobufAny) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProtobufAny) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ProtobufAny) SetType(v string) {
	o.Type = &v
}

func (o ProtobufAny) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProtobufAny) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["@type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProtobufAny) UnmarshalJSON(data []byte) (err error) {
	varProtobufAny := _ProtobufAny{}

	err = json.Unmarshal(data, &varProtobufAny)

	if err != nil {
		return err
	}

	*o = ProtobufAny(varProtobufAny)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "@type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProtobufAny struct {
	value *ProtobufAny
	isSet bool
}

func (v NullableProtobufAny) Get() *ProtobufAny {
	return v.value
}

func (v *NullableProtobufAny) Set(val *ProtobufAny) {
	v.value = val
	v.isSet = true
}

func (v NullableProtobufAny) IsSet() bool {
	return v.isSet
}

func (v *NullableProtobufAny) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtobufAny(val *ProtobufAny) *NullableProtobufAny {
	return &NullableProtobufAny{value: val, isSet: true}
}

func (v NullableProtobufAny) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtobufAny) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


