/*
divar_interface/open_platform/chatapi/chatapi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// ChatapiConversationType the model 'ChatapiConversationType'
type ChatapiConversationType string

// List of chatapiConversationType
const (
	CHATAPICONVERSATIONTYPE_POST ChatapiConversationType = "POST"
	CHATAPICONVERSATIONTYPE_BOT ChatapiConversationType = "BOT"
)

// All allowed values of ChatapiConversationType enum
var AllowedChatapiConversationTypeEnumValues = []ChatapiConversationType{
	"POST",
	"BOT",
}

func (v *ChatapiConversationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChatapiConversationType(value)
	for _, existing := range AllowedChatapiConversationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChatapiConversationType", value)
}

// NewChatapiConversationTypeFromValue returns a pointer to a valid ChatapiConversationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChatapiConversationTypeFromValue(v string) (*ChatapiConversationType, error) {
	ev := ChatapiConversationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChatapiConversationType: valid values are %v", v, AllowedChatapiConversationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChatapiConversationType) IsValid() bool {
	for _, existing := range AllowedChatapiConversationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to chatapiConversationType value
func (v ChatapiConversationType) Ptr() *ChatapiConversationType {
	return &v
}

type NullableChatapiConversationType struct {
	value *ChatapiConversationType
	isSet bool
}

func (v NullableChatapiConversationType) Get() *ChatapiConversationType {
	return v.value
}

func (v *NullableChatapiConversationType) Set(val *ChatapiConversationType) {
	v.value = val
	v.isSet = true
}

func (v NullableChatapiConversationType) IsSet() bool {
	return v.isSet
}

func (v *NullableChatapiConversationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatapiConversationType(val *ChatapiConversationType) *NullableChatapiConversationType {
	return &NullableChatapiConversationType{value: val, isSet: true}
}

func (v NullableChatapiConversationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatapiConversationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

