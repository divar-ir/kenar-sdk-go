/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// EventsRegisterEventSubscriptionRequestEventType the model 'EventsRegisterEventSubscriptionRequestEventType'
type EventsRegisterEventSubscriptionRequestEventType string

// List of eventsRegisterEventSubscriptionRequestEventType
const (
	EVENTSREGISTEREVENTSUBSCRIPTIONREQUESTEVENTTYPE_NEW_MESSAGE_ON_POST EventsRegisterEventSubscriptionRequestEventType = "NEW_MESSAGE_ON_POST"
	EVENTSREGISTEREVENTSUBSCRIPTIONREQUESTEVENTTYPE_POST_UPDATE EventsRegisterEventSubscriptionRequestEventType = "POST_UPDATE"
)

// All allowed values of EventsRegisterEventSubscriptionRequestEventType enum
var AllowedEventsRegisterEventSubscriptionRequestEventTypeEnumValues = []EventsRegisterEventSubscriptionRequestEventType{
	"NEW_MESSAGE_ON_POST",
	"POST_UPDATE",
}

func (v *EventsRegisterEventSubscriptionRequestEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EventsRegisterEventSubscriptionRequestEventType(value)
	for _, existing := range AllowedEventsRegisterEventSubscriptionRequestEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EventsRegisterEventSubscriptionRequestEventType", value)
}

// NewEventsRegisterEventSubscriptionRequestEventTypeFromValue returns a pointer to a valid EventsRegisterEventSubscriptionRequestEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEventsRegisterEventSubscriptionRequestEventTypeFromValue(v string) (*EventsRegisterEventSubscriptionRequestEventType, error) {
	ev := EventsRegisterEventSubscriptionRequestEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EventsRegisterEventSubscriptionRequestEventType: valid values are %v", v, AllowedEventsRegisterEventSubscriptionRequestEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EventsRegisterEventSubscriptionRequestEventType) IsValid() bool {
	for _, existing := range AllowedEventsRegisterEventSubscriptionRequestEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to eventsRegisterEventSubscriptionRequestEventType value
func (v EventsRegisterEventSubscriptionRequestEventType) Ptr() *EventsRegisterEventSubscriptionRequestEventType {
	return &v
}

type NullableEventsRegisterEventSubscriptionRequestEventType struct {
	value *EventsRegisterEventSubscriptionRequestEventType
	isSet bool
}

func (v NullableEventsRegisterEventSubscriptionRequestEventType) Get() *EventsRegisterEventSubscriptionRequestEventType {
	return v.value
}

func (v *NullableEventsRegisterEventSubscriptionRequestEventType) Set(val *EventsRegisterEventSubscriptionRequestEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsRegisterEventSubscriptionRequestEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsRegisterEventSubscriptionRequestEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsRegisterEventSubscriptionRequestEventType(val *EventsRegisterEventSubscriptionRequestEventType) *NullableEventsRegisterEventSubscriptionRequestEventType {
	return &NullableEventsRegisterEventSubscriptionRequestEventType{value: val, isSet: true}
}

func (v NullableEventsRegisterEventSubscriptionRequestEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsRegisterEventSubscriptionRequestEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

