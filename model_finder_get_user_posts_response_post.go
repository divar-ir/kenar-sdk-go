/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the FinderGetUserPostsResponsePost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FinderGetUserPostsResponsePost{}

// FinderGetUserPostsResponsePost struct for FinderGetUserPostsResponsePost
type FinderGetUserPostsResponsePost struct {
	Token *string `json:"token,omitempty"`
	Title *string `json:"title,omitempty"`
	Images []string `json:"images,omitempty"`
	Category *string `json:"category,omitempty"`
}

// NewFinderGetUserPostsResponsePost instantiates a new FinderGetUserPostsResponsePost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinderGetUserPostsResponsePost() *FinderGetUserPostsResponsePost {
	this := FinderGetUserPostsResponsePost{}
	return &this
}

// NewFinderGetUserPostsResponsePostWithDefaults instantiates a new FinderGetUserPostsResponsePost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFinderGetUserPostsResponsePostWithDefaults() *FinderGetUserPostsResponsePost {
	this := FinderGetUserPostsResponsePost{}
	return &this
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *FinderGetUserPostsResponsePost) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinderGetUserPostsResponsePost) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *FinderGetUserPostsResponsePost) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *FinderGetUserPostsResponsePost) SetToken(v string) {
	o.Token = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *FinderGetUserPostsResponsePost) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinderGetUserPostsResponsePost) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *FinderGetUserPostsResponsePost) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *FinderGetUserPostsResponsePost) SetTitle(v string) {
	o.Title = &v
}

// GetImages returns the Images field value if set, zero value otherwise.
func (o *FinderGetUserPostsResponsePost) GetImages() []string {
	if o == nil || IsNil(o.Images) {
		var ret []string
		return ret
	}
	return o.Images
}

// GetImagesOk returns a tuple with the Images field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinderGetUserPostsResponsePost) GetImagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Images) {
		return nil, false
	}
	return o.Images, true
}

// HasImages returns a boolean if a field has been set.
func (o *FinderGetUserPostsResponsePost) HasImages() bool {
	if o != nil && !IsNil(o.Images) {
		return true
	}

	return false
}

// SetImages gets a reference to the given []string and assigns it to the Images field.
func (o *FinderGetUserPostsResponsePost) SetImages(v []string) {
	o.Images = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *FinderGetUserPostsResponsePost) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FinderGetUserPostsResponsePost) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *FinderGetUserPostsResponsePost) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *FinderGetUserPostsResponsePost) SetCategory(v string) {
	o.Category = &v
}

func (o FinderGetUserPostsResponsePost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FinderGetUserPostsResponsePost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Images) {
		toSerialize["images"] = o.Images
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	return toSerialize, nil
}

type NullableFinderGetUserPostsResponsePost struct {
	value *FinderGetUserPostsResponsePost
	isSet bool
}

func (v NullableFinderGetUserPostsResponsePost) Get() *FinderGetUserPostsResponsePost {
	return v.value
}

func (v *NullableFinderGetUserPostsResponsePost) Set(val *FinderGetUserPostsResponsePost) {
	v.value = val
	v.isSet = true
}

func (v NullableFinderGetUserPostsResponsePost) IsSet() bool {
	return v.isSet
}

func (v *NullableFinderGetUserPostsResponsePost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinderGetUserPostsResponsePost(val *FinderGetUserPostsResponsePost) *NullableFinderGetUserPostsResponsePost {
	return &NullableFinderGetUserPostsResponsePost{value: val, isSet: true}
}

func (v NullableFinderGetUserPostsResponsePost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinderGetUserPostsResponsePost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


