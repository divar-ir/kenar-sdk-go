/*
divar_interface/open_platform/chatapi/chatapi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// AddonSemanticOwnershipResult the model 'AddonSemanticOwnershipResult'
type AddonSemanticOwnershipResult string

// List of AddonSemanticOwnershipResult
const (
	ADDONSEMANTICOWNERSHIPRESULT_OWNERSHIP_CONFIRMED AddonSemanticOwnershipResult = "OWNERSHIP_CONFIRMED"
	ADDONSEMANTICOWNERSHIPRESULT_OWNERSHIP_DELEGATION_CONFIRMED AddonSemanticOwnershipResult = "OWNERSHIP_DELEGATION_CONFIRMED"
)

// All allowed values of AddonSemanticOwnershipResult enum
var AllowedAddonSemanticOwnershipResultEnumValues = []AddonSemanticOwnershipResult{
	"OWNERSHIP_CONFIRMED",
	"OWNERSHIP_DELEGATION_CONFIRMED",
}

func (v *AddonSemanticOwnershipResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddonSemanticOwnershipResult(value)
	for _, existing := range AllowedAddonSemanticOwnershipResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddonSemanticOwnershipResult", value)
}

// NewAddonSemanticOwnershipResultFromValue returns a pointer to a valid AddonSemanticOwnershipResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddonSemanticOwnershipResultFromValue(v string) (*AddonSemanticOwnershipResult, error) {
	ev := AddonSemanticOwnershipResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddonSemanticOwnershipResult: valid values are %v", v, AllowedAddonSemanticOwnershipResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddonSemanticOwnershipResult) IsValid() bool {
	for _, existing := range AllowedAddonSemanticOwnershipResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AddonSemanticOwnershipResult value
func (v AddonSemanticOwnershipResult) Ptr() *AddonSemanticOwnershipResult {
	return &v
}

type NullableAddonSemanticOwnershipResult struct {
	value *AddonSemanticOwnershipResult
	isSet bool
}

func (v NullableAddonSemanticOwnershipResult) Get() *AddonSemanticOwnershipResult {
	return v.value
}

func (v *NullableAddonSemanticOwnershipResult) Set(val *AddonSemanticOwnershipResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonSemanticOwnershipResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonSemanticOwnershipResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonSemanticOwnershipResult(val *AddonSemanticOwnershipResult) *NullableAddonSemanticOwnershipResult {
	return &NullableAddonSemanticOwnershipResult{value: val, isSet: true}
}

func (v NullableAddonSemanticOwnershipResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonSemanticOwnershipResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

