/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// AddonSemanticPostVerificationResult the model 'AddonSemanticPostVerificationResult'
type AddonSemanticPostVerificationResult string

// List of AddonSemanticPostVerificationResult
const (
	ADDONSEMANTICPOSTVERIFICATIONRESULT_POST_INFORMATION_MATCHED AddonSemanticPostVerificationResult = "POST_INFORMATION_MATCHED"
)

// All allowed values of AddonSemanticPostVerificationResult enum
var AllowedAddonSemanticPostVerificationResultEnumValues = []AddonSemanticPostVerificationResult{
	"POST_INFORMATION_MATCHED",
}

func (v *AddonSemanticPostVerificationResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddonSemanticPostVerificationResult(value)
	for _, existing := range AllowedAddonSemanticPostVerificationResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddonSemanticPostVerificationResult", value)
}

// NewAddonSemanticPostVerificationResultFromValue returns a pointer to a valid AddonSemanticPostVerificationResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddonSemanticPostVerificationResultFromValue(v string) (*AddonSemanticPostVerificationResult, error) {
	ev := AddonSemanticPostVerificationResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddonSemanticPostVerificationResult: valid values are %v", v, AllowedAddonSemanticPostVerificationResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddonSemanticPostVerificationResult) IsValid() bool {
	for _, existing := range AllowedAddonSemanticPostVerificationResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AddonSemanticPostVerificationResult value
func (v AddonSemanticPostVerificationResult) Ptr() *AddonSemanticPostVerificationResult {
	return &v
}

type NullableAddonSemanticPostVerificationResult struct {
	value *AddonSemanticPostVerificationResult
	isSet bool
}

func (v NullableAddonSemanticPostVerificationResult) Get() *AddonSemanticPostVerificationResult {
	return v.value
}

func (v *NullableAddonSemanticPostVerificationResult) Set(val *AddonSemanticPostVerificationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonSemanticPostVerificationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonSemanticPostVerificationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonSemanticPostVerificationResult(val *AddonSemanticPostVerificationResult) *NullableAddonSemanticPostVerificationResult {
	return &NullableAddonSemanticPostVerificationResult{value: val, isSet: true}
}

func (v NullableAddonSemanticPostVerificationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonSemanticPostVerificationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

