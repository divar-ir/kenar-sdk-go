/*
divar_interface/open_platform/chatapi/chatapi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the AddonsSelectorRow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddonsSelectorRow{}

// AddonsSelectorRow struct for AddonsSelectorRow
type AddonsSelectorRow struct {
	Title *string `json:"title,omitempty"`
	ImageId *string `json:"image_id,omitempty"`
	HasDivider *bool `json:"has_divider,omitempty"`
	IconName *DivarIconsIconName `json:"icon_name,omitempty"`
	Action *AddonsAction `json:"action,omitempty"`
}

// NewAddonsSelectorRow instantiates a new AddonsSelectorRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonsSelectorRow() *AddonsSelectorRow {
	this := AddonsSelectorRow{}
	return &this
}

// NewAddonsSelectorRowWithDefaults instantiates a new AddonsSelectorRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonsSelectorRowWithDefaults() *AddonsSelectorRow {
	this := AddonsSelectorRow{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *AddonsSelectorRow) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsSelectorRow) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *AddonsSelectorRow) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *AddonsSelectorRow) SetTitle(v string) {
	o.Title = &v
}

// GetImageId returns the ImageId field value if set, zero value otherwise.
func (o *AddonsSelectorRow) GetImageId() string {
	if o == nil || IsNil(o.ImageId) {
		var ret string
		return ret
	}
	return *o.ImageId
}

// GetImageIdOk returns a tuple with the ImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsSelectorRow) GetImageIdOk() (*string, bool) {
	if o == nil || IsNil(o.ImageId) {
		return nil, false
	}
	return o.ImageId, true
}

// HasImageId returns a boolean if a field has been set.
func (o *AddonsSelectorRow) HasImageId() bool {
	if o != nil && !IsNil(o.ImageId) {
		return true
	}

	return false
}

// SetImageId gets a reference to the given string and assigns it to the ImageId field.
func (o *AddonsSelectorRow) SetImageId(v string) {
	o.ImageId = &v
}

// GetHasDivider returns the HasDivider field value if set, zero value otherwise.
func (o *AddonsSelectorRow) GetHasDivider() bool {
	if o == nil || IsNil(o.HasDivider) {
		var ret bool
		return ret
	}
	return *o.HasDivider
}

// GetHasDividerOk returns a tuple with the HasDivider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsSelectorRow) GetHasDividerOk() (*bool, bool) {
	if o == nil || IsNil(o.HasDivider) {
		return nil, false
	}
	return o.HasDivider, true
}

// HasHasDivider returns a boolean if a field has been set.
func (o *AddonsSelectorRow) HasHasDivider() bool {
	if o != nil && !IsNil(o.HasDivider) {
		return true
	}

	return false
}

// SetHasDivider gets a reference to the given bool and assigns it to the HasDivider field.
func (o *AddonsSelectorRow) SetHasDivider(v bool) {
	o.HasDivider = &v
}

// GetIconName returns the IconName field value if set, zero value otherwise.
func (o *AddonsSelectorRow) GetIconName() DivarIconsIconName {
	if o == nil || IsNil(o.IconName) {
		var ret DivarIconsIconName
		return ret
	}
	return *o.IconName
}

// GetIconNameOk returns a tuple with the IconName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsSelectorRow) GetIconNameOk() (*DivarIconsIconName, bool) {
	if o == nil || IsNil(o.IconName) {
		return nil, false
	}
	return o.IconName, true
}

// HasIconName returns a boolean if a field has been set.
func (o *AddonsSelectorRow) HasIconName() bool {
	if o != nil && !IsNil(o.IconName) {
		return true
	}

	return false
}

// SetIconName gets a reference to the given DivarIconsIconName and assigns it to the IconName field.
func (o *AddonsSelectorRow) SetIconName(v DivarIconsIconName) {
	o.IconName = &v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *AddonsSelectorRow) GetAction() AddonsAction {
	if o == nil || IsNil(o.Action) {
		var ret AddonsAction
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsSelectorRow) GetActionOk() (*AddonsAction, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *AddonsSelectorRow) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given AddonsAction and assigns it to the Action field.
func (o *AddonsSelectorRow) SetAction(v AddonsAction) {
	o.Action = &v
}

func (o AddonsSelectorRow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddonsSelectorRow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.ImageId) {
		toSerialize["image_id"] = o.ImageId
	}
	if !IsNil(o.HasDivider) {
		toSerialize["has_divider"] = o.HasDivider
	}
	if !IsNil(o.IconName) {
		toSerialize["icon_name"] = o.IconName
	}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	return toSerialize, nil
}

type NullableAddonsSelectorRow struct {
	value *AddonsSelectorRow
	isSet bool
}

func (v NullableAddonsSelectorRow) Get() *AddonsSelectorRow {
	return v.value
}

func (v *NullableAddonsSelectorRow) Set(val *AddonsSelectorRow) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonsSelectorRow) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonsSelectorRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonsSelectorRow(val *AddonsSelectorRow) *NullableAddonsSelectorRow {
	return &NullableAddonsSelectorRow{value: val, isSet: true}
}

func (v NullableAddonsSelectorRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonsSelectorRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


