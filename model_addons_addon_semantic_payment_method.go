/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// AddonsAddonSemanticPaymentMethod the model 'AddonsAddonSemanticPaymentMethod'
type AddonsAddonSemanticPaymentMethod string

// List of addonsAddonSemanticPaymentMethod
const (
	ADDONSADDONSEMANTICPAYMENTMETHOD_SECURE AddonsAddonSemanticPaymentMethod = "SECURE"
)

// All allowed values of AddonsAddonSemanticPaymentMethod enum
var AllowedAddonsAddonSemanticPaymentMethodEnumValues = []AddonsAddonSemanticPaymentMethod{
	"SECURE",
}

func (v *AddonsAddonSemanticPaymentMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddonsAddonSemanticPaymentMethod(value)
	for _, existing := range AllowedAddonsAddonSemanticPaymentMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddonsAddonSemanticPaymentMethod", value)
}

// NewAddonsAddonSemanticPaymentMethodFromValue returns a pointer to a valid AddonsAddonSemanticPaymentMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddonsAddonSemanticPaymentMethodFromValue(v string) (*AddonsAddonSemanticPaymentMethod, error) {
	ev := AddonsAddonSemanticPaymentMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddonsAddonSemanticPaymentMethod: valid values are %v", v, AllowedAddonsAddonSemanticPaymentMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddonsAddonSemanticPaymentMethod) IsValid() bool {
	for _, existing := range AllowedAddonsAddonSemanticPaymentMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to addonsAddonSemanticPaymentMethod value
func (v AddonsAddonSemanticPaymentMethod) Ptr() *AddonsAddonSemanticPaymentMethod {
	return &v
}

type NullableAddonsAddonSemanticPaymentMethod struct {
	value *AddonsAddonSemanticPaymentMethod
	isSet bool
}

func (v NullableAddonsAddonSemanticPaymentMethod) Get() *AddonsAddonSemanticPaymentMethod {
	return v.value
}

func (v *NullableAddonsAddonSemanticPaymentMethod) Set(val *AddonsAddonSemanticPaymentMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonsAddonSemanticPaymentMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonsAddonSemanticPaymentMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonsAddonSemanticPaymentMethod(val *AddonsAddonSemanticPaymentMethod) *NullableAddonsAddonSemanticPaymentMethod {
	return &NullableAddonsAddonSemanticPaymentMethod{value: val, isSet: true}
}

func (v NullableAddonsAddonSemanticPaymentMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonsAddonSemanticPaymentMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

