/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the ChatapiChatButton type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatapiChatButton{}

// ChatapiChatButton struct for ChatapiChatButton
type ChatapiChatButton struct {
	Action *AddonsAction `json:"action,omitempty"`
	Caption *string `json:"caption,omitempty"`
	Icon *DivarIconsIconName `json:"icon,omitempty"`
	IconName *string `json:"icon_name,omitempty"`
}

// NewChatapiChatButton instantiates a new ChatapiChatButton object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatapiChatButton() *ChatapiChatButton {
	this := ChatapiChatButton{}
	return &this
}

// NewChatapiChatButtonWithDefaults instantiates a new ChatapiChatButton object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatapiChatButtonWithDefaults() *ChatapiChatButton {
	this := ChatapiChatButton{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *ChatapiChatButton) GetAction() AddonsAction {
	if o == nil || IsNil(o.Action) {
		var ret AddonsAction
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatapiChatButton) GetActionOk() (*AddonsAction, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *ChatapiChatButton) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given AddonsAction and assigns it to the Action field.
func (o *ChatapiChatButton) SetAction(v AddonsAction) {
	o.Action = &v
}

// GetCaption returns the Caption field value if set, zero value otherwise.
func (o *ChatapiChatButton) GetCaption() string {
	if o == nil || IsNil(o.Caption) {
		var ret string
		return ret
	}
	return *o.Caption
}

// GetCaptionOk returns a tuple with the Caption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatapiChatButton) GetCaptionOk() (*string, bool) {
	if o == nil || IsNil(o.Caption) {
		return nil, false
	}
	return o.Caption, true
}

// HasCaption returns a boolean if a field has been set.
func (o *ChatapiChatButton) HasCaption() bool {
	if o != nil && !IsNil(o.Caption) {
		return true
	}

	return false
}

// SetCaption gets a reference to the given string and assigns it to the Caption field.
func (o *ChatapiChatButton) SetCaption(v string) {
	o.Caption = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *ChatapiChatButton) GetIcon() DivarIconsIconName {
	if o == nil || IsNil(o.Icon) {
		var ret DivarIconsIconName
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatapiChatButton) GetIconOk() (*DivarIconsIconName, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *ChatapiChatButton) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given DivarIconsIconName and assigns it to the Icon field.
func (o *ChatapiChatButton) SetIcon(v DivarIconsIconName) {
	o.Icon = &v
}

// GetIconName returns the IconName field value if set, zero value otherwise.
func (o *ChatapiChatButton) GetIconName() string {
	if o == nil || IsNil(o.IconName) {
		var ret string
		return ret
	}
	return *o.IconName
}

// GetIconNameOk returns a tuple with the IconName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatapiChatButton) GetIconNameOk() (*string, bool) {
	if o == nil || IsNil(o.IconName) {
		return nil, false
	}
	return o.IconName, true
}

// HasIconName returns a boolean if a field has been set.
func (o *ChatapiChatButton) HasIconName() bool {
	if o != nil && !IsNil(o.IconName) {
		return true
	}

	return false
}

// SetIconName gets a reference to the given string and assigns it to the IconName field.
func (o *ChatapiChatButton) SetIconName(v string) {
	o.IconName = &v
}

func (o ChatapiChatButton) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatapiChatButton) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Caption) {
		toSerialize["caption"] = o.Caption
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !IsNil(o.IconName) {
		toSerialize["icon_name"] = o.IconName
	}
	return toSerialize, nil
}

type NullableChatapiChatButton struct {
	value *ChatapiChatButton
	isSet bool
}

func (v NullableChatapiChatButton) Get() *ChatapiChatButton {
	return v.value
}

func (v *NullableChatapiChatButton) Set(val *ChatapiChatButton) {
	v.value = val
	v.isSet = true
}

func (v NullableChatapiChatButton) IsSet() bool {
	return v.isSet
}

func (v *NullableChatapiChatButton) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatapiChatButton(val *ChatapiChatButton) *NullableChatapiChatButton {
	return &NullableChatapiChatButton{value: val, isSet: true}
}

func (v NullableChatapiChatButton) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatapiChatButton) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


