/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
	"fmt"
)

// AddonSemanticInspectionResult the model 'AddonSemanticInspectionResult'
type AddonSemanticInspectionResult string

// List of AddonSemanticInspectionResult
const (
	ADDONSEMANTICINSPECTIONRESULT_INSPECTION_APPROVED AddonSemanticInspectionResult = "INSPECTION_APPROVED"
)

// All allowed values of AddonSemanticInspectionResult enum
var AllowedAddonSemanticInspectionResultEnumValues = []AddonSemanticInspectionResult{
	"INSPECTION_APPROVED",
}

func (v *AddonSemanticInspectionResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AddonSemanticInspectionResult(value)
	for _, existing := range AllowedAddonSemanticInspectionResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AddonSemanticInspectionResult", value)
}

// NewAddonSemanticInspectionResultFromValue returns a pointer to a valid AddonSemanticInspectionResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAddonSemanticInspectionResultFromValue(v string) (*AddonSemanticInspectionResult, error) {
	ev := AddonSemanticInspectionResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AddonSemanticInspectionResult: valid values are %v", v, AllowedAddonSemanticInspectionResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AddonSemanticInspectionResult) IsValid() bool {
	for _, existing := range AllowedAddonSemanticInspectionResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AddonSemanticInspectionResult value
func (v AddonSemanticInspectionResult) Ptr() *AddonSemanticInspectionResult {
	return &v
}

type NullableAddonSemanticInspectionResult struct {
	value *AddonSemanticInspectionResult
	isSet bool
}

func (v NullableAddonSemanticInspectionResult) Get() *AddonSemanticInspectionResult {
	return v.value
}

func (v *NullableAddonSemanticInspectionResult) Set(val *AddonSemanticInspectionResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonSemanticInspectionResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonSemanticInspectionResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonSemanticInspectionResult(val *AddonSemanticInspectionResult) *NullableAddonSemanticInspectionResult {
	return &NullableAddonSemanticInspectionResult{value: val, isSet: true}
}

func (v NullableAddonSemanticInspectionResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonSemanticInspectionResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

