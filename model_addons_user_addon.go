/*
Kenar API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the AddonsUserAddon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddonsUserAddon{}

// AddonsUserAddon struct for AddonsUserAddon
type AddonsUserAddon struct {
	MetaData *AddonsAddonMetaData `json:"meta_data,omitempty"`
	Phone *string `json:"phone,omitempty"`
	DivarUserId *string `json:"divar_user_id,omitempty"`
	Widgets map[string]interface{} `json:"widgets,omitempty"`
	Semantic *map[string]string `json:"semantic,omitempty"`
	SemanticData *AddonsAddonSemantic `json:"semantic_data,omitempty"`
	SensitiveSemantic *map[string]string `json:"sensitive_semantic,omitempty"`
	WidgetsSemantic map[string]interface{} `json:"widgets_semantic,omitempty"`
	Filters *AddonsUserAddonFilters `json:"filters,omitempty"`
}

// NewAddonsUserAddon instantiates a new AddonsUserAddon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonsUserAddon() *AddonsUserAddon {
	this := AddonsUserAddon{}
	return &this
}

// NewAddonsUserAddonWithDefaults instantiates a new AddonsUserAddon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonsUserAddonWithDefaults() *AddonsUserAddon {
	this := AddonsUserAddon{}
	return &this
}

// GetMetaData returns the MetaData field value if set, zero value otherwise.
func (o *AddonsUserAddon) GetMetaData() AddonsAddonMetaData {
	if o == nil || IsNil(o.MetaData) {
		var ret AddonsAddonMetaData
		return ret
	}
	return *o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsUserAddon) GetMetaDataOk() (*AddonsAddonMetaData, bool) {
	if o == nil || IsNil(o.MetaData) {
		return nil, false
	}
	return o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *AddonsUserAddon) HasMetaData() bool {
	if o != nil && !IsNil(o.MetaData) {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given AddonsAddonMetaData and assigns it to the MetaData field.
func (o *AddonsUserAddon) SetMetaData(v AddonsAddonMetaData) {
	o.MetaData = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *AddonsUserAddon) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsUserAddon) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *AddonsUserAddon) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *AddonsUserAddon) SetPhone(v string) {
	o.Phone = &v
}

// GetDivarUserId returns the DivarUserId field value if set, zero value otherwise.
func (o *AddonsUserAddon) GetDivarUserId() string {
	if o == nil || IsNil(o.DivarUserId) {
		var ret string
		return ret
	}
	return *o.DivarUserId
}

// GetDivarUserIdOk returns a tuple with the DivarUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsUserAddon) GetDivarUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.DivarUserId) {
		return nil, false
	}
	return o.DivarUserId, true
}

// HasDivarUserId returns a boolean if a field has been set.
func (o *AddonsUserAddon) HasDivarUserId() bool {
	if o != nil && !IsNil(o.DivarUserId) {
		return true
	}

	return false
}

// SetDivarUserId gets a reference to the given string and assigns it to the DivarUserId field.
func (o *AddonsUserAddon) SetDivarUserId(v string) {
	o.DivarUserId = &v
}

// GetWidgets returns the Widgets field value if set, zero value otherwise.
func (o *AddonsUserAddon) GetWidgets() map[string]interface{} {
	if o == nil || IsNil(o.Widgets) {
		var ret map[string]interface{}
		return ret
	}
	return o.Widgets
}

// GetWidgetsOk returns a tuple with the Widgets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsUserAddon) GetWidgetsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Widgets) {
		return map[string]interface{}{}, false
	}
	return o.Widgets, true
}

// HasWidgets returns a boolean if a field has been set.
func (o *AddonsUserAddon) HasWidgets() bool {
	if o != nil && !IsNil(o.Widgets) {
		return true
	}

	return false
}

// SetWidgets gets a reference to the given map[string]interface{} and assigns it to the Widgets field.
func (o *AddonsUserAddon) SetWidgets(v map[string]interface{}) {
	o.Widgets = v
}

// GetSemantic returns the Semantic field value if set, zero value otherwise.
func (o *AddonsUserAddon) GetSemantic() map[string]string {
	if o == nil || IsNil(o.Semantic) {
		var ret map[string]string
		return ret
	}
	return *o.Semantic
}

// GetSemanticOk returns a tuple with the Semantic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsUserAddon) GetSemanticOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Semantic) {
		return nil, false
	}
	return o.Semantic, true
}

// HasSemantic returns a boolean if a field has been set.
func (o *AddonsUserAddon) HasSemantic() bool {
	if o != nil && !IsNil(o.Semantic) {
		return true
	}

	return false
}

// SetSemantic gets a reference to the given map[string]string and assigns it to the Semantic field.
func (o *AddonsUserAddon) SetSemantic(v map[string]string) {
	o.Semantic = &v
}

// GetSemanticData returns the SemanticData field value if set, zero value otherwise.
func (o *AddonsUserAddon) GetSemanticData() AddonsAddonSemantic {
	if o == nil || IsNil(o.SemanticData) {
		var ret AddonsAddonSemantic
		return ret
	}
	return *o.SemanticData
}

// GetSemanticDataOk returns a tuple with the SemanticData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsUserAddon) GetSemanticDataOk() (*AddonsAddonSemantic, bool) {
	if o == nil || IsNil(o.SemanticData) {
		return nil, false
	}
	return o.SemanticData, true
}

// HasSemanticData returns a boolean if a field has been set.
func (o *AddonsUserAddon) HasSemanticData() bool {
	if o != nil && !IsNil(o.SemanticData) {
		return true
	}

	return false
}

// SetSemanticData gets a reference to the given AddonsAddonSemantic and assigns it to the SemanticData field.
func (o *AddonsUserAddon) SetSemanticData(v AddonsAddonSemantic) {
	o.SemanticData = &v
}

// GetSensitiveSemantic returns the SensitiveSemantic field value if set, zero value otherwise.
func (o *AddonsUserAddon) GetSensitiveSemantic() map[string]string {
	if o == nil || IsNil(o.SensitiveSemantic) {
		var ret map[string]string
		return ret
	}
	return *o.SensitiveSemantic
}

// GetSensitiveSemanticOk returns a tuple with the SensitiveSemantic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsUserAddon) GetSensitiveSemanticOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.SensitiveSemantic) {
		return nil, false
	}
	return o.SensitiveSemantic, true
}

// HasSensitiveSemantic returns a boolean if a field has been set.
func (o *AddonsUserAddon) HasSensitiveSemantic() bool {
	if o != nil && !IsNil(o.SensitiveSemantic) {
		return true
	}

	return false
}

// SetSensitiveSemantic gets a reference to the given map[string]string and assigns it to the SensitiveSemantic field.
func (o *AddonsUserAddon) SetSensitiveSemantic(v map[string]string) {
	o.SensitiveSemantic = &v
}

// GetWidgetsSemantic returns the WidgetsSemantic field value if set, zero value otherwise.
func (o *AddonsUserAddon) GetWidgetsSemantic() map[string]interface{} {
	if o == nil || IsNil(o.WidgetsSemantic) {
		var ret map[string]interface{}
		return ret
	}
	return o.WidgetsSemantic
}

// GetWidgetsSemanticOk returns a tuple with the WidgetsSemantic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsUserAddon) GetWidgetsSemanticOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.WidgetsSemantic) {
		return map[string]interface{}{}, false
	}
	return o.WidgetsSemantic, true
}

// HasWidgetsSemantic returns a boolean if a field has been set.
func (o *AddonsUserAddon) HasWidgetsSemantic() bool {
	if o != nil && !IsNil(o.WidgetsSemantic) {
		return true
	}

	return false
}

// SetWidgetsSemantic gets a reference to the given map[string]interface{} and assigns it to the WidgetsSemantic field.
func (o *AddonsUserAddon) SetWidgetsSemantic(v map[string]interface{}) {
	o.WidgetsSemantic = v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *AddonsUserAddon) GetFilters() AddonsUserAddonFilters {
	if o == nil || IsNil(o.Filters) {
		var ret AddonsUserAddonFilters
		return ret
	}
	return *o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsUserAddon) GetFiltersOk() (*AddonsUserAddonFilters, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *AddonsUserAddon) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given AddonsUserAddonFilters and assigns it to the Filters field.
func (o *AddonsUserAddon) SetFilters(v AddonsUserAddonFilters) {
	o.Filters = &v
}

func (o AddonsUserAddon) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddonsUserAddon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MetaData) {
		toSerialize["meta_data"] = o.MetaData
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.DivarUserId) {
		toSerialize["divar_user_id"] = o.DivarUserId
	}
	if !IsNil(o.Widgets) {
		toSerialize["widgets"] = o.Widgets
	}
	if !IsNil(o.Semantic) {
		toSerialize["semantic"] = o.Semantic
	}
	if !IsNil(o.SemanticData) {
		toSerialize["semantic_data"] = o.SemanticData
	}
	if !IsNil(o.SensitiveSemantic) {
		toSerialize["sensitive_semantic"] = o.SensitiveSemantic
	}
	if !IsNil(o.WidgetsSemantic) {
		toSerialize["widgets_semantic"] = o.WidgetsSemantic
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	return toSerialize, nil
}

type NullableAddonsUserAddon struct {
	value *AddonsUserAddon
	isSet bool
}

func (v NullableAddonsUserAddon) Get() *AddonsUserAddon {
	return v.value
}

func (v *NullableAddonsUserAddon) Set(val *AddonsUserAddon) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonsUserAddon) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonsUserAddon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonsUserAddon(val *AddonsUserAddon) *NullableAddonsUserAddon {
	return &NullableAddonsUserAddon{value: val, isSet: true}
}

func (v NullableAddonsUserAddon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonsUserAddon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


