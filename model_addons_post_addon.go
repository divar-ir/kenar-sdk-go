/*
divar_interface/open_platform/chatapi/chatapi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the AddonsPostAddon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddonsPostAddon{}

// AddonsPostAddon struct for AddonsPostAddon
type AddonsPostAddon struct {
	MetaData *AddonsAddonMetaData `json:"meta_data,omitempty"`
	Token *string `json:"token,omitempty"`
	App *AppsApp `json:"app,omitempty"`
	Widgets map[string]interface{} `json:"widgets,omitempty"`
	Score *string `json:"score,omitempty"`
	Selector *AddonsAddonSelector `json:"selector,omitempty"`
	Linkage *AddonsAddonLinkage `json:"linkage,omitempty"`
	SecondaryLinks *AddonsAddonSecondaryLinks `json:"secondary_links,omitempty"`
	Semantic *map[string]string `json:"semantic,omitempty"`
	SemanticData *AddonsAddonSemantic `json:"semantic_data,omitempty"`
	SensitiveSemantic *map[string]string `json:"sensitive_semantic,omitempty"`
	WidgetsSemantic map[string]interface{} `json:"widgets_semantic,omitempty"`
	SemanticSensitives []string `json:"semantic_sensitives,omitempty"`
}

// NewAddonsPostAddon instantiates a new AddonsPostAddon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonsPostAddon() *AddonsPostAddon {
	this := AddonsPostAddon{}
	return &this
}

// NewAddonsPostAddonWithDefaults instantiates a new AddonsPostAddon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonsPostAddonWithDefaults() *AddonsPostAddon {
	this := AddonsPostAddon{}
	return &this
}

// GetMetaData returns the MetaData field value if set, zero value otherwise.
func (o *AddonsPostAddon) GetMetaData() AddonsAddonMetaData {
	if o == nil || IsNil(o.MetaData) {
		var ret AddonsAddonMetaData
		return ret
	}
	return *o.MetaData
}

// GetMetaDataOk returns a tuple with the MetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsPostAddon) GetMetaDataOk() (*AddonsAddonMetaData, bool) {
	if o == nil || IsNil(o.MetaData) {
		return nil, false
	}
	return o.MetaData, true
}

// HasMetaData returns a boolean if a field has been set.
func (o *AddonsPostAddon) HasMetaData() bool {
	if o != nil && !IsNil(o.MetaData) {
		return true
	}

	return false
}

// SetMetaData gets a reference to the given AddonsAddonMetaData and assigns it to the MetaData field.
func (o *AddonsPostAddon) SetMetaData(v AddonsAddonMetaData) {
	o.MetaData = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *AddonsPostAddon) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsPostAddon) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *AddonsPostAddon) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *AddonsPostAddon) SetToken(v string) {
	o.Token = &v
}

// GetApp returns the App field value if set, zero value otherwise.
func (o *AddonsPostAddon) GetApp() AppsApp {
	if o == nil || IsNil(o.App) {
		var ret AppsApp
		return ret
	}
	return *o.App
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsPostAddon) GetAppOk() (*AppsApp, bool) {
	if o == nil || IsNil(o.App) {
		return nil, false
	}
	return o.App, true
}

// HasApp returns a boolean if a field has been set.
func (o *AddonsPostAddon) HasApp() bool {
	if o != nil && !IsNil(o.App) {
		return true
	}

	return false
}

// SetApp gets a reference to the given AppsApp and assigns it to the App field.
func (o *AddonsPostAddon) SetApp(v AppsApp) {
	o.App = &v
}

// GetWidgets returns the Widgets field value if set, zero value otherwise.
func (o *AddonsPostAddon) GetWidgets() map[string]interface{} {
	if o == nil || IsNil(o.Widgets) {
		var ret map[string]interface{}
		return ret
	}
	return o.Widgets
}

// GetWidgetsOk returns a tuple with the Widgets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsPostAddon) GetWidgetsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Widgets) {
		return map[string]interface{}{}, false
	}
	return o.Widgets, true
}

// HasWidgets returns a boolean if a field has been set.
func (o *AddonsPostAddon) HasWidgets() bool {
	if o != nil && !IsNil(o.Widgets) {
		return true
	}

	return false
}

// SetWidgets gets a reference to the given map[string]interface{} and assigns it to the Widgets field.
func (o *AddonsPostAddon) SetWidgets(v map[string]interface{}) {
	o.Widgets = v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *AddonsPostAddon) GetScore() string {
	if o == nil || IsNil(o.Score) {
		var ret string
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsPostAddon) GetScoreOk() (*string, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *AddonsPostAddon) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given string and assigns it to the Score field.
func (o *AddonsPostAddon) SetScore(v string) {
	o.Score = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *AddonsPostAddon) GetSelector() AddonsAddonSelector {
	if o == nil || IsNil(o.Selector) {
		var ret AddonsAddonSelector
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsPostAddon) GetSelectorOk() (*AddonsAddonSelector, bool) {
	if o == nil || IsNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *AddonsPostAddon) HasSelector() bool {
	if o != nil && !IsNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given AddonsAddonSelector and assigns it to the Selector field.
func (o *AddonsPostAddon) SetSelector(v AddonsAddonSelector) {
	o.Selector = &v
}

// GetLinkage returns the Linkage field value if set, zero value otherwise.
func (o *AddonsPostAddon) GetLinkage() AddonsAddonLinkage {
	if o == nil || IsNil(o.Linkage) {
		var ret AddonsAddonLinkage
		return ret
	}
	return *o.Linkage
}

// GetLinkageOk returns a tuple with the Linkage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsPostAddon) GetLinkageOk() (*AddonsAddonLinkage, bool) {
	if o == nil || IsNil(o.Linkage) {
		return nil, false
	}
	return o.Linkage, true
}

// HasLinkage returns a boolean if a field has been set.
func (o *AddonsPostAddon) HasLinkage() bool {
	if o != nil && !IsNil(o.Linkage) {
		return true
	}

	return false
}

// SetLinkage gets a reference to the given AddonsAddonLinkage and assigns it to the Linkage field.
func (o *AddonsPostAddon) SetLinkage(v AddonsAddonLinkage) {
	o.Linkage = &v
}

// GetSecondaryLinks returns the SecondaryLinks field value if set, zero value otherwise.
func (o *AddonsPostAddon) GetSecondaryLinks() AddonsAddonSecondaryLinks {
	if o == nil || IsNil(o.SecondaryLinks) {
		var ret AddonsAddonSecondaryLinks
		return ret
	}
	return *o.SecondaryLinks
}

// GetSecondaryLinksOk returns a tuple with the SecondaryLinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsPostAddon) GetSecondaryLinksOk() (*AddonsAddonSecondaryLinks, bool) {
	if o == nil || IsNil(o.SecondaryLinks) {
		return nil, false
	}
	return o.SecondaryLinks, true
}

// HasSecondaryLinks returns a boolean if a field has been set.
func (o *AddonsPostAddon) HasSecondaryLinks() bool {
	if o != nil && !IsNil(o.SecondaryLinks) {
		return true
	}

	return false
}

// SetSecondaryLinks gets a reference to the given AddonsAddonSecondaryLinks and assigns it to the SecondaryLinks field.
func (o *AddonsPostAddon) SetSecondaryLinks(v AddonsAddonSecondaryLinks) {
	o.SecondaryLinks = &v
}

// GetSemantic returns the Semantic field value if set, zero value otherwise.
func (o *AddonsPostAddon) GetSemantic() map[string]string {
	if o == nil || IsNil(o.Semantic) {
		var ret map[string]string
		return ret
	}
	return *o.Semantic
}

// GetSemanticOk returns a tuple with the Semantic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsPostAddon) GetSemanticOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Semantic) {
		return nil, false
	}
	return o.Semantic, true
}

// HasSemantic returns a boolean if a field has been set.
func (o *AddonsPostAddon) HasSemantic() bool {
	if o != nil && !IsNil(o.Semantic) {
		return true
	}

	return false
}

// SetSemantic gets a reference to the given map[string]string and assigns it to the Semantic field.
func (o *AddonsPostAddon) SetSemantic(v map[string]string) {
	o.Semantic = &v
}

// GetSemanticData returns the SemanticData field value if set, zero value otherwise.
func (o *AddonsPostAddon) GetSemanticData() AddonsAddonSemantic {
	if o == nil || IsNil(o.SemanticData) {
		var ret AddonsAddonSemantic
		return ret
	}
	return *o.SemanticData
}

// GetSemanticDataOk returns a tuple with the SemanticData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsPostAddon) GetSemanticDataOk() (*AddonsAddonSemantic, bool) {
	if o == nil || IsNil(o.SemanticData) {
		return nil, false
	}
	return o.SemanticData, true
}

// HasSemanticData returns a boolean if a field has been set.
func (o *AddonsPostAddon) HasSemanticData() bool {
	if o != nil && !IsNil(o.SemanticData) {
		return true
	}

	return false
}

// SetSemanticData gets a reference to the given AddonsAddonSemantic and assigns it to the SemanticData field.
func (o *AddonsPostAddon) SetSemanticData(v AddonsAddonSemantic) {
	o.SemanticData = &v
}

// GetSensitiveSemantic returns the SensitiveSemantic field value if set, zero value otherwise.
func (o *AddonsPostAddon) GetSensitiveSemantic() map[string]string {
	if o == nil || IsNil(o.SensitiveSemantic) {
		var ret map[string]string
		return ret
	}
	return *o.SensitiveSemantic
}

// GetSensitiveSemanticOk returns a tuple with the SensitiveSemantic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsPostAddon) GetSensitiveSemanticOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.SensitiveSemantic) {
		return nil, false
	}
	return o.SensitiveSemantic, true
}

// HasSensitiveSemantic returns a boolean if a field has been set.
func (o *AddonsPostAddon) HasSensitiveSemantic() bool {
	if o != nil && !IsNil(o.SensitiveSemantic) {
		return true
	}

	return false
}

// SetSensitiveSemantic gets a reference to the given map[string]string and assigns it to the SensitiveSemantic field.
func (o *AddonsPostAddon) SetSensitiveSemantic(v map[string]string) {
	o.SensitiveSemantic = &v
}

// GetWidgetsSemantic returns the WidgetsSemantic field value if set, zero value otherwise.
func (o *AddonsPostAddon) GetWidgetsSemantic() map[string]interface{} {
	if o == nil || IsNil(o.WidgetsSemantic) {
		var ret map[string]interface{}
		return ret
	}
	return o.WidgetsSemantic
}

// GetWidgetsSemanticOk returns a tuple with the WidgetsSemantic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsPostAddon) GetWidgetsSemanticOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.WidgetsSemantic) {
		return map[string]interface{}{}, false
	}
	return o.WidgetsSemantic, true
}

// HasWidgetsSemantic returns a boolean if a field has been set.
func (o *AddonsPostAddon) HasWidgetsSemantic() bool {
	if o != nil && !IsNil(o.WidgetsSemantic) {
		return true
	}

	return false
}

// SetWidgetsSemantic gets a reference to the given map[string]interface{} and assigns it to the WidgetsSemantic field.
func (o *AddonsPostAddon) SetWidgetsSemantic(v map[string]interface{}) {
	o.WidgetsSemantic = v
}

// GetSemanticSensitives returns the SemanticSensitives field value if set, zero value otherwise.
func (o *AddonsPostAddon) GetSemanticSensitives() []string {
	if o == nil || IsNil(o.SemanticSensitives) {
		var ret []string
		return ret
	}
	return o.SemanticSensitives
}

// GetSemanticSensitivesOk returns a tuple with the SemanticSensitives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsPostAddon) GetSemanticSensitivesOk() ([]string, bool) {
	if o == nil || IsNil(o.SemanticSensitives) {
		return nil, false
	}
	return o.SemanticSensitives, true
}

// HasSemanticSensitives returns a boolean if a field has been set.
func (o *AddonsPostAddon) HasSemanticSensitives() bool {
	if o != nil && !IsNil(o.SemanticSensitives) {
		return true
	}

	return false
}

// SetSemanticSensitives gets a reference to the given []string and assigns it to the SemanticSensitives field.
func (o *AddonsPostAddon) SetSemanticSensitives(v []string) {
	o.SemanticSensitives = v
}

func (o AddonsPostAddon) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddonsPostAddon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MetaData) {
		toSerialize["meta_data"] = o.MetaData
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.App) {
		toSerialize["app"] = o.App
	}
	if !IsNil(o.Widgets) {
		toSerialize["widgets"] = o.Widgets
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !IsNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	if !IsNil(o.Linkage) {
		toSerialize["linkage"] = o.Linkage
	}
	if !IsNil(o.SecondaryLinks) {
		toSerialize["secondary_links"] = o.SecondaryLinks
	}
	if !IsNil(o.Semantic) {
		toSerialize["semantic"] = o.Semantic
	}
	if !IsNil(o.SemanticData) {
		toSerialize["semantic_data"] = o.SemanticData
	}
	if !IsNil(o.SensitiveSemantic) {
		toSerialize["sensitive_semantic"] = o.SensitiveSemantic
	}
	if !IsNil(o.WidgetsSemantic) {
		toSerialize["widgets_semantic"] = o.WidgetsSemantic
	}
	if !IsNil(o.SemanticSensitives) {
		toSerialize["semantic_sensitives"] = o.SemanticSensitives
	}
	return toSerialize, nil
}

type NullableAddonsPostAddon struct {
	value *AddonsPostAddon
	isSet bool
}

func (v NullableAddonsPostAddon) Get() *AddonsPostAddon {
	return v.value
}

func (v *NullableAddonsPostAddon) Set(val *AddonsPostAddon) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonsPostAddon) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonsPostAddon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonsPostAddon(val *AddonsPostAddon) *NullableAddonsPostAddon {
	return &NullableAddonsPostAddon{value: val, isSet: true}
}

func (v NullableAddonsPostAddon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonsPostAddon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


