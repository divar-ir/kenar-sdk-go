/*
divar_interface/open_platform/chatapi/chatapi.proto

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package kenarapi

import (
	"encoding/json"
)

// checks if the MessageSender type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageSender{}

// MessageSender struct for MessageSender
type MessageSender struct {
	Side *ChatapiMessageSenderSide `json:"side,omitempty"`
	Type *ChatapiMessageSenderType `json:"type,omitempty"`
}

// NewMessageSender instantiates a new MessageSender object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageSender() *MessageSender {
	this := MessageSender{}
	return &this
}

// NewMessageSenderWithDefaults instantiates a new MessageSender object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageSenderWithDefaults() *MessageSender {
	this := MessageSender{}
	return &this
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *MessageSender) GetSide() ChatapiMessageSenderSide {
	if o == nil || IsNil(o.Side) {
		var ret ChatapiMessageSenderSide
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageSender) GetSideOk() (*ChatapiMessageSenderSide, bool) {
	if o == nil || IsNil(o.Side) {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *MessageSender) HasSide() bool {
	if o != nil && !IsNil(o.Side) {
		return true
	}

	return false
}

// SetSide gets a reference to the given ChatapiMessageSenderSide and assigns it to the Side field.
func (o *MessageSender) SetSide(v ChatapiMessageSenderSide) {
	o.Side = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MessageSender) GetType() ChatapiMessageSenderType {
	if o == nil || IsNil(o.Type) {
		var ret ChatapiMessageSenderType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageSender) GetTypeOk() (*ChatapiMessageSenderType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MessageSender) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ChatapiMessageSenderType and assigns it to the Type field.
func (o *MessageSender) SetType(v ChatapiMessageSenderType) {
	o.Type = &v
}

func (o MessageSender) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageSender) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Side) {
		toSerialize["side"] = o.Side
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableMessageSender struct {
	value *MessageSender
	isSet bool
}

func (v NullableMessageSender) Get() *MessageSender {
	return v.value
}

func (v *NullableMessageSender) Set(val *MessageSender) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageSender) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageSender) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageSender(val *MessageSender) *NullableMessageSender {
	return &NullableMessageSender{value: val, isSet: true}
}

func (v NullableMessageSender) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageSender) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


